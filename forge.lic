=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts
  * Adapted from a script by Mallitek

  USAGE:
  ;forge <log, trash, or stow> <book type> <chapter> <page> <ingot type> <item noun> <optional assemble item noun>

  arg1: whether to add the item to your logbook, trash it, or stow it
  arg2: type of book (blacksmithing, armorsmithing, weaponsmithing)
  arg3: chapter of book
  arg4: page of book
  arg5: metal type of the ingot in your bag
  arg6: item noun to make
  arg7: item component/assemble noun (optional)

  EXAMPLES:
  ;forge log weaponsmithing 2 1 steel sword hilt
  ;forge trash blacksmithing 6 1 bronze cup
  ;forge stow blacksmithing 6 7 bronze scratcher
=end

custom_require(%w(common))

class Forge
  include DRC

  def main(args:[])
    if args.length < 6
      echo('\nINVALID ARGUMENTS\nUSAGE: \n;forge <log, trash, or stow> <container> <hammer type> <book type> <chapter> <page> <ingot type> <item noun> <optional assemble item noun>')
      exit
    end

    settings = get_settings
    @bag = settings.forge_container
    @hammer_type = settings.forge_hammer
    @finish, @book_type, @chapter, @page, @metal, @item, @part = args

    smith
  end

  def get_or_fail(item)
    waitrt?
    case bput("get my #{item} from my #{@bag}", '^You get', '^You are already', '^What do you', '^What were you')
    when 'What do you', 'What were you'
      echo("You seem to be missing: #{item}")
      exit
    end
  end

  def store_thing(item)
    waitrt?
    bput("put my #{item} in my #{@bag}", 'You put your', 'What were you referring to')
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def smith
    get_or_fail("#{@book_type} book")
    turn_to("chapter #{@chapter}")
    turn_to("page #{@page}")
    bput('study my book', 'Roundtime')
    store_thing('book')
    get_or_fail("#{@metal} ingot")
    bput('put my ingot on anvil', 'You put your')
    get_or_fail("#{@hammer_type} hammer")
    get_or_fail('tongs')
    pound('ingot')
  end

  def pound(item = @item)
    waitrt?
    case bput("pound #{item} on anvil with my hammer",
              'You must be holding',
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'straightening along the horn of the anvil', 'would benefit from some soft reworking.' # typo?
             )
    when 'You must be holding'
      get_or_fail("#{@hammer_type} hammer")
      pound(item)
    when 'needs more fuel', 'need some more fuel'
      add_fuel
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      bellows
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.'
      turn_item
    else
      pound
    end
  end

  def add_fuel
    store_thing('tongs')
    get_or_fail('shovel')
    bput('push fuel with my shovel', 'Roundtime')
    waitrt?
    store_thing('shovel')
    get_or_fail('tongs')
    pound
  end

  def bellows
    store_thing("#{@hammer_type} hammer")
    get_or_fail('bellows')
    bput('push my bellows', 'Roundtime')
    waitrt?
    store_thing('bellows')
    get_or_fail("#{@hammer_type} hammer")
    pound
  end

  def turn_item
    waitrt?
    case bput("turn #{@item} on anvil with my tongs",
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'Roundtime'
             )
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    else
      pound
    end
  end

  def slack_tub
    store_thing("#{@hammer_type} hammer")
    store_thing('tongs')
    bput('push tub', 'Roundtime')
    waitrt?
    bput("get #{@item} from anvil", 'You get')

    assemble_part

    if 'armorsmithing'.include? @book_type
      echo('*** NOT YET IMPLEMENTED ***')
      # For armor, you will need to purchase a set of pliers. Rather than using a grindstone, the various pieces of armor must be woven together by using PULL <armor> WITH MY PLIERS. This may take multiple steps of pulling, each with a variety of messaging, but continue to pull. In addition, during these pulls, you may need to ASSEMBLE additional pieces, but this is normal.
    elsif 'weaponsmithing'.include? @book_type
      grind_item
    end

    add_oil
  end

  def assemble_part
    return if @part.nil?

    get_or_fail(@part)
    bput("assemble my #{@item} with my #{@part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting')
    waitrt?
  end

  def grind_item
    find_empty_room([8909, 8910, 8911], 8775)

    4.times do
      bput('turn grind', 'Roundtime')
      waitrt?
    end
    bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
    waitrt?
  end

  def add_oil
    get_or_fail('oil')
    bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches')
    waitrt?
    store_thing('oil')
    case @finish
    when /log/
      logbook_item
    when /stow/
      store_thing(@item)
    when /trash/
      dispose_trash(@item)
    end
  end

  def logbook_item
    get_or_fail('forging logbook')
    bput("bundle my #{@item} with my logbook", 'You notate the', 'This work order has expired') # need the failure case for low quality.
    store_thing('forging logbook')
  end
end

Forge.new.main(args: variable.drop(1))
