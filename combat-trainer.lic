=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script is used to train a list of weapon skills in order of the lowest amount of field experience.
=end

custom_require(%w(common drinfomon events spellmonitor equipmanager))

$thrown_skills = ['Heavy Thrown', 'Light Thrown']
$aim_skills = %w(Bow Slings Crossbow)
$twohanded_skills = ['Twohanded Blunt', 'Twohanded Edged', 'Bow']
$ranged_skills = $thrown_skills + $aim_skills

class SetupProcess
  include DRC

  def initialize(dance_threshold:0, dance_skill:nil, stances:[], weapon_training:{}, retreat_threshold:nil)
    echo("SetupProcess(#{dance_threshold},#{dance_skill}, #{stances}, #{weapon_training})") if $debug_mode
    @dance_threshold = dance_threshold
    @retreat_threshold = retreat_threshold
    @dance_skill = dance_skill
    @stances = stances
    @weapon_training = weapon_training

    @weapon_name = ''
    @target = -1
    @last_skill = nil
    @was_retreating = false
  end

  def execute(game_state)
    return true if game_state['clean_up'] == 'done'
    if game_state['clean_up'] == 'stow'
      retreat
      $EquipmentManager.stow_weapon(@weapon_training[game_state['weapon_skill']])
      game_state['clean_up'] = 'done'
      return true
    end
    game_state['dancing'] = should_dance?
    game_state['retreating'] = should_retreat?
    if game_state['dancing']
      dance(game_state)
    elsif game_state['retreating']
      determine_next_to_train(game_state, retreat_weapons(@weapon_training))
      @was_retreating = true
    else
      determine_next_to_train(game_state, @weapon_training)
      @was_retreating = false
    end

    weapon_skill = game_state['weapon_skill']
    game_state['weapon_name'] = @weapon_name

    check_weapon(weapon_skill) if @last_skill != weapon_skill
    check_stance(weapon_skill)
    @last_skill = weapon_skill
    false
  end

  private

  def dance(game_state)
    @last_skill = game_state['weapon_skill']
    game_state['weapon_skill'] = @dance_skill
    @weapon_name = @weapon_training[@dance_skill]
  end

  def retreat_weapons(weapon_training)
    weapon_training.each_with_object({}) { |info, obj| obj[info.first] = info.last if $ranged_skills.include?(info.first) }
  end

  def skill_done?(game_state)
    game_state['action_count'] >= 10 || DRSkill.getxp(game_state['weapon_skill']).to_i >= @target
  end

  def ending_ranged?(game_state)
    @was_retreating && !game_state['retreating']
  end

  def determine_next_to_train(game_state, weapon_training)
    return unless skill_done?(game_state) || !weapon_training[game_state['weapon_skill']] || ending_ranged?(game_state)

    echo("new skill needed for training #{game_state['action_count']}:#{DRSkill.getxp(game_state['weapon_skill']).to_i}:#{@target}") if $debug_mode

    @last_skill = game_state['weapon_skill']
    game_state['action_count'] = 0

    game_state['weapon_skill'], @weapon_name = weapon_training.min_by { |skill, _| [DRSkill.getxp(skill).to_i, DRSkill.getrank(skill).to_i] }

    @target = DRSkill.getxp(game_state['weapon_skill']).to_i + 3
  end

  def should_dance?
    DRRoom.npcs.length <= @dance_threshold || DRRoom.npcs.empty?
  end

  def should_retreat?
    return false unless @retreat_threshold
    DRRoom.npcs.length >= @retreat_threshold
  end

  def last_stance
    Flags['last-stance'][0] =~ /(\d+)%.* (\d+)%.* (\d+)%.* (\d+)/
    { 'EVASION' => Regexp.last_match(1).to_i, 'PARRY' => Regexp.last_match(2).to_i, 'SHIELD' => Regexp.last_match(3).to_i, 'SPARE' => Regexp.last_match(4).to_i }
  end

  def build_stance_string(vals)
    "stance set #{vals['EVASION']} #{vals['PARRY']} #{vals['SHIELD']}"
  end

  def check_stance(weapon_skill, override = nil)
    vals = { 'EVASION' => 0, 'PARRY' => 0, 'SHIELD' => 0, 'SPARE' => 0 }
    skill_map = { 'Parry Ability' => 'Parry', 'Shield Usage' => 'Shield' }
    previous = last_stance
    points = override || previous.values.inject(&:+)

    if @stances[weapon_skill].nil?
      priority = ['Evasion', 'Parry Ability', 'Shield Usage'].sort_by { |skill| DRSkill.getxp(skill).to_i }
    else
      priority = @stances[weapon_skill]
    end

    priority.each do |skill|
      skill = skill_map[skill] if skill_map[skill]
      vals[skill.upcase] = points >= 100 ? 100 : points
      points -= vals[skill.upcase]
    end

    return if vals == previous
    return unless /maximum number of points \((\d+)/ =~ bput(build_stance_string(vals), 'Setting your Evasion stance to', 'is above your maximum number of points \(\d+')
    check_stance(weapon_skill, Regexp.last_match(1).to_i)
  end

  def check_weapon(weapon_skill)
    echo("checking weapons as #{@last_skill.inspect}!=#{weapon_skill}") if $debug_mode
    $EquipmentManager.stow_weapon(@weapon_training[@last_skill])
    $EquipmentManager.wield_weapon(@weapon_name, weapon_skill) if weapon_skill != 'Brawling'
  end
end

class LootProcess
  include DRC

  def initialize(skin:false, arrange_all:false, arrange_count:0, lootables:[], arrange_types:{}, ritual_type:{}, necro:false, tie_bundle:false)
    @skin = skin
    @arrange_all = arrange_all
    @arrange_count = arrange_count
    @lootables = lootables
    @arrange_types = arrange_types
    @no_skins = []
    @too_many = []
    @constructs = []
    @ritual_type = ritual_type
    @necro = necro
    @tie_bundle = tie_bundle
    @need_bundle = false
    @weapon_skill
    setup_bundle
  end

  def setup_bundle
    case bput('tap bundle', 'You tap a \w+ bundle that you are wearing', 'I could not find what you were referring to')
    when /lumpy/
      if @tie_bundle
        bput('tie bundle', 'TIE the bundle again')
        bput('tie bundle', 'you tie the bundle')
      end
    when /could not find/
      @need_bundle = @tie_bundle
    end
  end

  def execute(game_state)
    game_state['mob_died'] = false
    dispose_body(game_state)
    stow_lootables
    if (game_state['mob_died'] || DRRoom.npcs.empty?) && game_state['clean_up'] == 'kill'
      game_state['clean_up'] = 'clear_magic'
    end
    return true if %w(clear_magic stow).include?(game_state['clean_up'])
    false
  end

  def stow_lootables
    pair = [checkleft, checkright]
    tried_loot = false
    @lootables.each do |item|
      next if @too_many.include?(item.downcase)
      matches = DRRoom.room_objs.grep(/\b#{item}/)
      tried_loot ||= !matches.empty?
      matches.each { |_| fput "stow #{item}" }
    end
    return unless tried_loot
    pause 1
    if checkleft != pair.first && !@lootables.grep(/#{checkleft}/).empty?
      echo("out of room, failed to store #{checkleft}")
      @too_many.push(checkleft.downcase)
      dispose_trash(checkleft)
    end
    if checkright != pair.last && !@lootables.grep(/#{checkright}/).empty?
      echo("out of room, failed to store #{checkright}")
      @too_many.push(checkright.downcase)
      dispose_trash(checkright)
    end
  end

  def dispose_body(game_state)
    return if DRRoom.dead_npcs.length < 1
    game_state['mob_died'] = true
    echo("necrocheck after game_state: #{@necro}") if $debug_mode
    if @necro
      echo("necrocheck in dispose_body: #{@necro}") if $debug_mode
      check_thanatology(DRRoom.dead_npcs.first) 
      check_skinning(DRRoom.dead_npcs.first) if ['preserve'].include?(@ritual_type)
    elsif @skin
      check_skinning(DRRoom.dead_npcs.first, game_state)
    end
    bput('loot', 'You search', 'I could not find what you were referring to')
    pause 0.2 while DRRoom.dead_npcs.length > 0
  end

  # partially completed, only works for a single ritual.
  def check_thanatology(mob_noun)
    echo("necrocheck2: #{@necro}") if $debug_mode
    echo("RITUALcheck: #{@ritual_type}") if $debug_mode
    return if @constructs.include?(mob_noun)
    arrange_mob(mob_noun) if @arrange_count > 0
    if @ritual_type = 'dissect'
      perform_message = "perform #{@ritual_type} on #{mob_noun}"
      case bput(perform_message, 'Rituals do not work upon constructs', 'precise motions with your ritual knife', 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts', 'roundtime')
      when 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts'
        return
      when 'Rituals do not work upon constructs'
        echo("adding #{mob_noun} to constructs list: #{@constructs}") if $debug_mode
        @constructs.push(mob_noun)
        return
    elsif @ritual_type = 'harvest'
      perform_message = "perform preserve on #{mob_noun}"
      case bput(perform_message, 'Rituals do not work upon constructs', 'precise motions with your ritual knife', 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts', 'roundtime')
      when 'corpse to make one long', 'carefully position the corpse', 'corpse and make a few quick precise cuts'
        waitrt?
        perform_message = "perform harvest on #{mob_noun}"
        when 'precise motions with your ritual knife'
        waitrt?
        fput 'drop material'
       return

    end
    waitrt?
    # Need to call something here to dispose of the harvested "thing" if perform harvest is used.
    # Eventually need a method for self-healing that would use this same block to set it up the perform consume and prep/cast consume flesh/devour
    pause 0.25
    waitrt?
    snap = [checkleft, checkright]
    dispose_trash(checkleft) if snap.first != checkleft
    dispose_trash(checkright) if snap.last != checkright

    # perform preserve success:  You bend over the CRITTER'S 'corpse to make one long,' continuous cut with your ritual knife that just barely pierces into it.  Unseen energies seep into the creature's fluids, suspending the corpse in unnaturla statis for a time.
    # perform dissect success:   'You carefully position the corpse' and make a cut across its length,
    # perform consume success:   You kneel over the ADJECTIVE CRITTER's 'corpse and make a few quick precise cuts' with your ritual knife.  Your cuts follow the vital lines of the corpse, causing its residual life force to bubble forth, ready for draining.
    # perform harvest success:   You bend over the CRITTER'S 'corpse to make a few quick,' precise motions with your ritual knife, focusing you thanatological insight intently in order to prepare it for harvesting.
    # perform harvest fail:
    # failure due to construct:  'Rituals do not work upon' constructs.
  end

  def arrange_mob(mob_noun)
    arranges = 0
    type = @arrange_types[mob_noun] || 'skin'
    arrange_message = @arrange_all ? "arrange all for #{type}" : "arrange for #{type}"
    while arranges < @arrange_count
      arranges += 1
      case bput(arrange_message, 'You begin to arrange', 'You continue arranging', 'You make a mistake', 'You complete arranging', 'That creature cannot', 'That has already been arranged', 'Arrange what', 'cannot be skinned')
      when 'You complete arranging', 'That has already been arranged'
        break
      when 'Arrange what', 'cannot be skinned'
        echo("adding #{mob_noun} to no skin list: #{@no_skins}") if $debug_mode
        @no_skins.push(mob_noun)
        return
      when 'That creature cannot'
        arranges = 0
        arrange_message = @arrange_all ? 'arrange all' : 'arrange'
      end
      waitrt?
    end
  end

  def check_skinning(mob_noun, game_state)
    return if @no_skins.include?(mob_noun)
    arrange_mob(mob_noun) if @arrange_count > 0
    pause 0.25
    waitrt?
    snap = [checkleft, checkright]
    case bput('skin', 'roundtime', 'skin what', 'cannot be skinned', 'carrying far too many items')
    when 'carrying far too many items'
      waitrt?
      fput 'get skin from bundle'
      fput 'drop skin'
      fput 'skin'
    when 'cannot be skinned'
      echo("adding #{mob_noun} to no skin list: #{@no_skins}") if $debug_mode
      @no_skins.push(mob_noun)
    end
    pause 1
    waitrt?
    if @need_bundle && snap != [checkleft, checkright]
      $EquipmentManager.stow_weapon(game_state['weapon_name']) unless game_state['weapon_skill'] == 'Brawling'
      if 'You get' == bput('get bundling rope', 'You get', 'What were you referring to')
        fput('bundle')
        fput('wear bundle')
        bput('tie bundle', 'TIE the bundle again')
        bput('tie bundle', 'you tie the bundle')
        fput('adjust bundle')
      else
        dispose_trash(checkleft) if checkleft
        dispose_trash(checkright) if checkright
      end
      @need_bundle = false
      $EquipmentManager.wield_weapon(game_state['weapon_name'], game_state['weapon_skill']) unless game_state['weapon_skill'] == 'Brawling'
    else
      dispose_trash(checkleft) if snap.first != checkleft
      dispose_trash(checkright) if snap.last != checkright
    end
  end
end

class SafetyProcess
  include DRC

  def initialize
    @danger = false
    Flags.add('ct-engaged', 'closes to pole weapon range on you', 'closes to melee range on you')
  end

  def execute(game_state)
    fix_standing
    @danger = in_danger?
    keep_away if !@danger && game_state['retreating']
    game_state['danger'] = @danger
  end

  private

  def fix_standing
    return if checkstanding
    fput('stand')
  end

  def keep_away
    return unless Flags['ct-engaged']

    Flags.reset('ct-engaged')
    retreat
  end

  def in_danger?
    return false if checkhealth > 75 && !checkbleeding
    unless @danger
      Flags.reset('ct-engaged')
      retreat
    end

    fput 'exit' if checkhealth < 40

    keep_away

    custom_require('tendme') if checkbleeding && !Script.running?('tendme')
    true
  end
end

class SpellProcess
  include DRC

  def initialize(buffs:{}, ospells:[], camb:nil, casts:[], preps:[], is_empath:false)
    echo("SpellProcess(#{buffs}, #{ospells}, #{camb}, #{casts}, #{preps})") if $debug_mode
    @buff_spells = buffs
    @offensive_spells = ospells
    @cambrinth = camb
    @casts = casts
    @preps = preps
    @is_empath = is_empath

    if (buffs.size > 0 || ospells.length > 0) && (casts.empty? || preps.empty?)
      fail(ArgumentError, 'Must provide casting/prep messages to use spells')
    end

    @prep_spell = false
    @charges = nil
    @previous_skill = nil
    Flags.add('ct-spelllost', 'Your pattern dissipates with the loss of your target')
    @offensive_spells
      .select { |spell| spell['expire'] }
      .each { |spell| add_spell_flag(spell['name'], spell['expire']) }
    @buff_spells
      .select { |_name, data| data['expire'] }
      .each { |name, data| add_spell_flag(name, data['expire']) }
    @cast_timer = nil
  end

  def add_spell_flag(name, expire)
    Flags.add("ct-#{name}", expire)
    Flags["ct-#{name}"] = true
  end

  def execute(game_state)
    return true if game_state['stow']
    check_timer
    if Flags['ct-spelllost']
      @prep_spell = false
      Flags.reset('ct-spelllost')
    end
    @offensive_spells.select { |spell| spell['expire'] }.each { |spell| Flags["ct-#{spell['name']}"] = true } if game_state['mob_died']
    unless @prep_spell
      bless_thrown(game_state['weapon_skill'])
      ignite_weapon(game_state['weapon_skill'])
      check_buffs
      @previous_skill = game_state['weapon_skill']
    end
    check_offensive(game_state['dancing']) unless @prep_spell || DRRoom.npcs.empty?
    check_current if @prep_spell
    game_state['casting'] = @prep_spell
    if game_state['clean_up'] == 'clear_magic' && !@prep_spell
      game_state['clean_up'] = 'stow'
      fput('release dalu') if DRSpells.active_spells['Damaris\' Lullaby']
      return true
    end
    false
  end

  private

  def check_timer
    return if @cast_timer.nil? || (Time.now - @cast_timer) <= 60

    @cast_timer = nil
    @prep_spell = false
    fput('release spell')
  end

  def bless_thrown(weapon_skill)
    return unless @buff_spells['Bless']
    return unless @previous_skill != weapon_skill
    return unless $thrown_skills.include? weapon_skill

    bput('prepare Bless', *@preps)
    bput("cast #{checkright}", *@casts)
  end

  def ignite_weapon(weapon_skill)
    return unless @buff_spells['Ignite']
    return unless @previous_skill != weapon_skill
    return if $aim_skills.include? weapon_skill
    return if weapon_skill == 'Brawling'

    bput('release ignite', 'The warm feeling in your hand goes away', 'Release what')
    bput('prepare Ignite', *@preps)
    bput("cast #{checkright}", 'Tendrils of flame dart along your hand', 'The flames dancing along your fingertips', 'Currently lacking the skill', 'You don\'t think you can manage to ignite')
  end

  def charge_cambrinth
    return false unless @charges
    echo("charge_camb: #{@charges}") if $debug_mode

    if @charges.length > 0
      bput("charge #{@cambrinth} #{@charges.pop}", '^You harness')
      waitrt?
    else
      bput("invoke #{@cambrinth}", 'You reach for its center', 'Your link to the')
      @charges = nil
    end
    true
  end

  def check_current
    return if charge_cambrinth
    cast if Flags['ct-spellcast']
  end

  def cast
    case bput(@custom_cast || 'cast', *([@casts] + [/^Your target pattern dissipates/, /^You can't cast that at yourself/]))
    when /^Your target pattern dissipates/, /^You can't cast that at yourself/
      fput('release spell')
    end
    @custom_cast = nil

    @prep_spell = nil
    @cast_timer = nil

    return unless @after
    @after.each { |action| bput(action['message'], action['matches']) }
    @after = nil
  end

  def check_buffs
    return if checkmana < 30
    name, data = @buff_spells
                 .select { |_name, data| !data['recast'].nil? }
                 .select { |name, data| data['expire'] ? Flags["ct-#{name}"] : true }
                 .find { |name, data| !DRSpells.active_spells[name] || DRSpells.active_spells[name] <= data['recast'] }
    echo("found buff missing: #{name}") if $debug_mode && name
    data['name'] = name
    prepare_spell(data)
  end

  def check_offensive(dancing)
    return if checkmana < 40
    data = @offensive_spells
           .select { |spell| spell['expire'] ? Flags["ct-#{spell['name']}"] : true }
           .select { |spell| dancing ? spell['harmless'] : true }
           .min_by { |spell| DRSkill.getxp(spell['skill']).to_i }
    return if DRSkill.getxp(data['skill']).to_i >= 34 && checkmana < 70 # make this a spell option
    prepare_spell(data)
    Flags.reset('ct-spelllost')
  end

  def prepare_spell(data)
    return unless data
    @cast_timer = Time.now
    echo("prepare spell: #{data}") if $debug_mode
    if data['cyclic']
      fput('release care') if DRSpells.active_spells['Caress of the Sun']
      fput("release #{data['abbrev']}") # make bputs. better spells
    end
    command = 'pre'
    command = data['skill'] == 'Debilitation' ? 'pre' : 'tar' if data['skill']
    bput("#{command} #{data['abbrev']} #{data['mana']}", *(@preps + ['You are already preparing']))
    @prep_spell = true
    @charges = data['cambrinth'].dup if data['cambrinth']
    @custom_cast = data['cast']
    @after = data['after']
    Flags.reset("ct-#{data['name']}") if data['expire']
    Flags.reset('ct-spellcast')
    data['before'].each { |action| bput(action['message'], action['matches']) } if data['before']
  end
end

class AbilityProcess
  include DRC

  def initialize(buffs:[], kneel_khri:false, khri_preps:[])
    @khri = buffs.delete('khri') || []
    @buffs = buffs
    @cooldown_timers = {}
    @kneel_khri = kneel_khri
    @khri_preps = khri_preps
  end

  def execute(game_state)
    check_nonspell_buffs(game_state)
    false
  end

  private

  def check_nonspell_buffs(game_state)
    @buffs.each do |action, cooldown|
      timer = @cooldown_timers[action]
      next unless !timer || (Time.now - timer).to_i > cooldown
      @cooldown_timers[action] = Time.now
      fput action
      waitrt?
    end
    return if game_state['danger'] && @kneel_khri
    @khri.select { |name| !DRSpells.active_spells["Khri #{name}"] }.each do |name|
      timer = @cooldown_timers[name]
      next unless !timer || (Time.now - timer).to_i > 30
      fput('kneel') if @kneel_khri
      @cooldown_timers[name] = Time.now if ['Your body is willing', 'You have not recovered'].include? bput("Khri #{name}", *@khri_preps + [/Your body is willing/, /You have not recovered/])
      waitrt?
      fput('stand') if @kneel_khri
    end
  end
end

class TrainerProcess
  include DRC

  def initialize(training_abilities:{})
    @training_abilities = training_abilities
    @cooldown_timers = {}
    echo("Trainer: #{@training_abilities}") if $debug_mode
  end

  def execute(game_state)
    return if game_state['danger'] || game_state['casting']
    case select_ability
    when 'PercMana'
      moon_mage_perc unless game_state['retreating']
    when 'Perc'
      bput('perc', 'You reach out') unless game_state['retreating']
    when 'Astro'
      astrology unless game_state['retreating']
    when 'App'
      bput("app #{DRRoom.npcs.first}", 'Taking stock of', 'It\'s dead', 'You can\'t determine anything about this creature.', 'I could not find', 'You cannot appraise that') unless game_state['retreating'] || DRRoom.npcs.empty?
    when 'Hunt'
      bput('hunt', 'You take note of ') unless game_state['retreating']
    when 'Pray'
      bput('pray meraud', 'You glance')
    when 'Scream'
      bput('Scream conc', 'Inhaling deeply', 'There is nothing') unless DRRoom.npcs.empty?
    when 'Khri Prowess'
      bput('khri prowess', 'Remembering the mantra of mind over matter', 'You\'re already using the Prowess meditation.', 'previous use of the Prowess', 'Your body is willing', 'Your mind and body are willing') unless DRRoom.npcs.empty?
    end
    waitrt?
    false
  end

  private

  def moon_mage_perc
    retreat
    bput('perc mana', 'You reach out')
  end

  def astrology
    retreat
    bput('predict weather', 'You predict that', 'You are far too', 'you lack the skill to grasp them fully')
  end

  def select_ability
    ability = @training_abilities.find { |name, ability_info| check_ability(name, ability_info) }.first
    echo("Selected: #{ability}") if ability && $debug_mode
    @cooldown_timers[ability] = Time.now
    ability
  end

  def check_ability(name, ability_info)
    echo("check ability: #{name} #{ability_info}") if $debug_mode
    expcheck = DRSkill.getxp(ability_info[:check]).to_i < 31
    return expcheck unless @cooldown_timers[name]
    Time.now - @cooldown_timers[name] >= ability_info[:cooldown] ? expcheck : false
  end
end

class AttackProcess
  include DRC

  def initialize(aim_fillers:[], aim_fillers_stealth:nil, charged_maneuvers:{}, dance_actions:[], dance_actions_stealth:nil, fatigue_regen_threshold:90, fatigue_regen_action:'bob', dual_load:false, is_empath:false, backstab:nil, ambush:false)
    @aim_fillers = aim_fillers
    @aim_fillers_stealth = aim_fillers_stealth
    @charged_maneuvers = charged_maneuvers
    @dance_actions = dance_actions
    @dance_actions_stealth = dance_actions_stealth
    @fatigue_regen_threshold = fatigue_regen_threshold
    @fatigue_regen_action = fatigue_regen_action
    @dual_load = dual_load
    @is_empath = is_empath
    @backstab = backstab
    @ambush = ambush

    @action_queue = []
    @dance_queue = []
    @cooldown_timers = {}
    @no_stab_mobs = []
    @no_stab_current_mob = false
    @loaded = false
    @selected_maneuver = ''
    Flags.add('ct-ranged-ready', 'You think you have your best shot possible now')
  end

  def execute(game_state)
    if DRRoom.npcs.uniq.length == 1 && @no_stab_mobs.include?(DRRoom.npcs.uniq.first)
      @no_stab_current_mob = true
    elsif game_state['mob_died'] && @no_stab_current_mob
      @no_stab_current_mob = false
    end
    if game_state['dancing']
      if game_state['clean_up'] == 'kill'
        game_state['clean_up'] = 'clear_magic'
      else
        dance
      end
      return false
    end

    if fatigue_low?
      echo("***Fatigue: #{DRStats.fatigue}***") if $debug_mode
      echo("***Target: #{@fatigue_regen_threshold}***") if $debug_mode
      fput(@fatigue_regen_action)
      return false
    end

    return false if @is_empath

    weapon_skill = game_state['weapon_skill']

    charged_maneuver = check_charged_maneuver(@charged_maneuvers[weapon_skill])

    if $thrown_skills.include?(weapon_skill)
      attack_thrown(game_state)
    elsif $aim_skills.include?(weapon_skill)
      attack_aimed(charged_maneuver, game_state)
    else
      attack_melee(charged_maneuver, game_state)
    end
    false
  end

  private

  def fatigue_low?
    DRStats.fatigue < @fatigue_regen_threshold
  end

  def attack_melee(charged_maneuver, game_state)
    if charged_maneuver.empty?
      weapon_skill = game_state['weapon_skill']
      is_offhand = weapon_skill == 'Offhand Weapon'

      if @backstab.include?(weapon_skill) || (@ambush && DRSkill.getxp('Backstab').to_i < 34 && !is_offhand)
        fput('hide')
        pause 1
        waitrt?
        if is_offhand && @backstab
          hidden_attack = @no_stab_current_mob || !is_offhand ? 'attack back' : 'backstab left'
          command = checkhidden ? hidden_attack : 'attack left'
        else
          hidden_attack = @no_stab_current_mob || !@backstab.include?(weapon_skill) ? 'attack back' : 'backstab'
          command = checkhidden ? hidden_attack : 'attack'
        end
      else
        command = is_offhand ? 'attack left' : 'attack'
      end
      fput(command)
    else
      use_charged_maneuver(charged_maneuver)
    end

    waitrt?

    if reget(5, 'You can\'t backstab that')
      if DRRoom.npcs.uniq.length == 1
        @no_stab_mobs.push(DRRoom.npcs.first)
      else
        @no_stab_current_mob = true
      end
    end

    if reget(5, 'You aren\'t close enough to attack', 'It would help if you were closer')
      fput('eng')
      pause 6
    else
      game_state['action_count'] += 1
    end
  end

  def attack_thrown(game_state)
    weapon_name = checkright
    bput('lob', 'roundtime', 'What are you trying to lob')
    waitrt?
    if weapon_name == 'blades'
      until /(Stow what|You put your)/ =~ bput('stow blade', 'Stow what', 'You pick up .*blade', 'You put your blades')
      end
      bput('get my blades', 'You get ')
    else
      bput("get my #{weapon_name}", 'You are already holding', "You pick up.*#{weapon_name}")
    end
    game_state['action_count'] += 1
  end

  def attack_aimed(charged_maneuver, game_state)
    @selected_maneuver = charged_maneuver unless @loaded
    @loaded = false if game_state['mob_died']
    @action_queue = [] if Flags['ct-ranged-ready']

    if @loaded && @action_queue.empty?
      if @selected_maneuver.empty?
        case bput('shoot', 'isn\'t loaded', 'There is nothing', 'But your', 'you fire', 'I could not find', 'with no effect and falls to the ground', 'Face what')
        when 'you fire'
          game_state['action_count'] += 1
        end
        @loaded = false
      else
        use_charged_maneuver @selected_maneuver
        game_state['action_count'] += 1
        @loaded = false
      end
      waitrt?
    elsif @loaded
      fput(@action_queue.shift)
      waitrt?
    else
      if @dual_load && DRSpells.active_spells['Hands of Lirisa']
        bput('load arrows', 'You reach into', 'already loaded')
      else
        bput('load', 'You reach into', 'already loaded')
      end

      waitrt?
      @loaded = true
      if @selected_maneuver.empty?
        @action_queue = get_actions(@aim_fillers, @aim_fillers_stealth, game_state['weapon_skill'])
        bput('aim', 'You begin to target', 'You are already', 'There is nothing else', 'Face what\?', 'You shift your target')
        Flags.reset('ct-ranged-ready')
      end
    end
  end

  def get_actions(actions, stealth_actions, weapon_skill)
    echo("get_actions #{actions}:#{stealth_actions}") if $debug_mode

    (stealth_actions && stealth_actions[weapon_skill] && (DRSkill.getxp('Stealth').to_i < 34)) ? stealth_actions[weapon_skill].dup : actions[weapon_skill].dup
  end

  def dance
    if DRRoom.npcs.empty?
      pause 1
    else
      if @dance_queue.empty?
        actions = @dance_actions_stealth && !@dance_actions_stealth.empty? && DRSkill.getxp('Stealth').to_i < 34 ? @dance_actions_stealth.dup : @dance_actions.dup
        @dance_queue = actions
      end
      fput(@dance_queue.shift)
      waitrt?
    end
  end

  def check_charged_maneuver(charged_maneuver)
    return '' unless charged_maneuver
    timer = @cooldown_timers[charged_maneuver]
    if timer && (Time.now - timer).to_i < 60
      return ''
    else
      echo "***Ready to use charged maneuver: #{charged_maneuver}***" if $debug_mode && !charged_maneuver.empty?
      return charged_maneuver
    end
  end

  def use_charged_maneuver(action)
    @cooldown_timers[action] = Time.now
    attempt = bput("maneuver #{action}", 'You brace your', 'balanced and', 'Taking a full step back', 'You take a step back', 'You lower your shoulders', 'You angle to the side and ', 'rest a bit longer', 'You square up your feet')
    return if attempt == 'rest a bit longer'

    # Maneuvers have extra non-RT delays
    pause 7
    waitrt?
  end
end

class CombatTrainer
  include DRC

  attr_reader :running

  def stop
    echo 'Received stop signal' if $debug_mode
    @stop = true
  end

  def initialize(args:[])
    @stop = false
    @running = true

    should_debug = args.delete('debug')
    should_app = args.delete('app')
    darg = args.find { |arg| arg =~ /d\d+/ }
    args.delete(darg) if darg
    rarg = args.find { |arg| arg =~ /r\d+/ }
    args.delete(rarg) if rarg
    settings = get_settings(args)

    debug(settings) if should_debug
    set_dance(darg, settings) if darg
    set_retreat(rarg, settings) if rarg
    app(settings) if should_app

    settings.storage_containers([]).each { |container| fput("open my #{container}") }

    main(settings)
  end

  def app(settings)
    settings.training_abilities['App'] = { check: 'Appraisal', cooldown: 60 }
  end

  def set_dance(message, settings)
    message =~ /d(\d+)/
    settings.dance_threshold = Regexp.last_match(1).to_i
  end

  def set_retreat(message, settings)
    message =~ /r(\d+)/
    settings.retreat_threshold = Regexp.last_match(1).to_i
  end

  def debug(settings)
    settings.combat_trainer_debug = true
  end

  def main(settings)
    setup

    $debug_mode = settings.combat_trainer_debug

    #TODO pass all these thgouth as one object
    skin = settings.skinning['skin']
    arrange_all = settings.skinning['arrange_all']
    arrange_count = settings.skinning['arrange_count']
    arrange_types = settings.skinning['arrange_types']
    tie_bundle = settings.skinning['tie_bundle']
    necro = settings.thanatology['necro']
    ritual_type = settings.thanatology['ritual_type']

    $EquipmentManager.wear_equipment_set(settings.worn_items) if settings.worn_items

    game_state = {
      'dancing' => false,
      'retreating' => false,
      'mob_died' => false,
      'action_count' => 0,
      'weapon_skill' => nil,
      'danger' => false
    }

    combat_processes = [
      SetupProcess.new(dance_threshold: settings.dance_threshold, dance_skill: settings.dance_skill, stances: settings.stances, weapon_training: settings.weapon_training, retreat_threshold: settings.retreat_threshold),
      SpellProcess.new(buffs: settings.buff_spells, ospells: settings.offensive_spells, camb: settings.cambrinth, casts: settings.cast_messages, preps: settings.prep_messages, is_empath: settings.empath),
      AbilityProcess.new(buffs: settings.buff_nonspells, kneel_khri: settings.kneel_khri, khri_preps: settings.khri_preps),
      LootProcess.new(
        skin: skin,
        arrange_all: arrange_all,
        arrange_count: arrange_count,
        lootables: settings.lootables,
        tie_bundle: tie_bundle,
        arrange_types: arrange_types,
        ritual_type: ritual_type,
        necro: necro),
      SafetyProcess.new,
      TrainerProcess.new(training_abilities: settings.training_abilities),
      AttackProcess.new(
        aim_fillers: settings.aim_fillers, aim_fillers_stealth: settings.aim_fillers_stealth,
        charged_maneuvers: settings.charged_maneuvers,
        dance_actions: settings.dance_actions, dance_actions_stealth: settings.dance_actions_stealth,
        fatigue_regen_threshold: settings.fatigue_regen_threshold, fatigue_regen_action: settings.fatigue_regen_action,
        dual_load: settings.dual_load,
        is_empath: settings.empath,
        backstab: settings.backstab,
        ambush: settings.ambush
      )
    ]

    loop do
      combat_processes.each do |process|
        break if process.execute(game_state)
      end
      if game_state['clean_up'] == 'done'
        @running = false
        break
      end
      game_state['clean_up'] = 'kill' if @stop && !game_state['clean_up']
    end
  end

  def setup
    Flags.add('ct-spellcast', '^Your formation of a targeting pattern around .+ has completed\.', '^You feel fully prepared to cast your spell\.')

    Flags.add('last-stance', 'Setting your Evasion stance to \d+%, your Parry stance to \d+%, and your Shield stance to \d+%.  You have \d+ stance points left')

    fput 'stance set 100 40 40'
    pause 0.25 until Flags['last-stance']
  end
end

$COMBAT_TRAINER = CombatTrainer.new(args: variable.drop(1))
