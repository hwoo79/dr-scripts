=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  This script will train a list of skills in order of the lowest amount of field experience. It is intended to be used in The Crossing (https://elanthipedia.play.net/mediawiki/index.php/RanikMap1).

  Before running this script for the first time:
  * Set up a configuration script named "crossing-training-setup"
    * Download "crossing-training-setup" for an example configuration script.
  * You can turn on debug mode with ;e UserVars.crossing_trainer_debug = true
=end

custom_require(%w(common drinfomon events spellmonitor pick sell-loot theurgy forge smelt equipmanager))

class CrossingTraining
  include DRC

  def stop
    @stop = true
  end

  def is_running?
    @running
  end

  def idling?
    @idling
  end

  def initialize
    @stop = false
    @running = true
    @idling = false
    @song_list = { 'scales halt' => 'scales', 'scales' => 'arpeggios halt', 'arpeggios halt' => 'arpeggios', 'arpeggios' => 'ditty halt',
                   'ditty halt' => 'ditty', 'ditty' => 'folk halt', 'folk halt' => 'folk', 'folk' => 'ballad halt', 'ballad halt' => 'ballad', 'ballad' => 'waltz halt',
                   'waltz halt' => 'waltz', 'waltz' => 'lullaby halt', 'lullaby halt' => 'lullaby', 'lullaby' => 'march halt', 'march halt' => 'march',
                   'march' => 'jig halt', 'jig halt' => 'jig', 'jig' => 'lament halt', 'lament halt' => 'lament', 'lament' => 'wedding halt', 'wedding halt' => 'wedding',
                   'wedding' => 'hymn halt', 'hymn halt' => 'hymn', 'hymn' => 'rumba halt', 'rumba halt' => 'rumba', 'rumba' => 'polka halt', 'polka halt' => 'polka',
                   'polka' => 'battle halt', 'battle halt' => 'battle', 'battle' => 'reel halt', 'reel halt' => 'reel', 'reel' => 'elegy halt', 'elegy halt' => 'elegy',
                   'elegy' => 'serenade halt', 'serenade halt' => 'serenade', 'serenade' => 'minuet halt', 'minuet halt' => 'minuet', 'minuet' => 'psalm halt',
                   'psalm halt' => 'psalm', 'psalm' => 'dirgehalt', 'dirge halt' => 'dirge', 'dirge' => 'gavotte halt', 'gavotte halt' => 'gavotte',
                   'gavotte' => 'tango halt', 'tango halt' => 'tango', 'tango' => 'tarantella halt', 'tarantella halt' => 'tarantella',
                   'tarantella' => 'bolero halt', 'bolero halt' => 'bolero', 'bolero' => 'nocturne halt', 'nocturne halt' => 'nocturne',
                   'nocturne' => 'requiem halt', 'requiem halt' => 'requiem', 'requiem' => 'fantasia halt', 'fantasia halt' => 'fantasia',
                   'fantasia' => 'rondo halt', 'rondo halt' => 'rondo', 'rondo' => 'aria halt', 'aria halt' => 'aria', 'aria' => 'sonataconcerto halt',
                   'sonataconcerto halt' => 'sonataconcerto', 'sonataconcerto' => 'sonataconcerto' }
  end

  def main
    setup

    loop do
      event_loop
      next unless @stop
      @running = false
      stop_play
      break
    end
  end

  def setup
    # Configure UserVars
    if UserVars.use_yaml
      @settings = get_settings(variable.drop(1))
    else
      unless wait_for_script_to_complete('crossing-setup')
        echo '***Please configure your setup script (open this script for instructions).***'
        stop_script 'crossing-training'
      end
      @settings = UserVars
    end

    fput('release aewo') if DRSpells.active_spells['Aether Wolves']

    Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')
  end

  def event_loop
    walk_to @settings.safe_room

    # TODO: Your teacher is not here, so you are no longer learning anything.
    check_listening

    empty_hands

    # The next skill to train is the one with the lowest field experience
    skill = @settings.crossing_training
            .select { |s| ready_to_use?(@settings.exp_timers[s]) }
            .min_by { |s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }

    if skill.empty? || DRSkill.getxp(skill).to_i >= 28
      echo '***Skills capped, sleeping***' if UserVars.crossing_trainer_debug
      fput 'exit' if @settings.exit_on_skills_capped
      # Output a harmless command to prevent being logged out
      fput 'tdp'
      @idling = true
      play_zill
      pause 30
      return
    end

    stop_play
    @idling = false

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    @settings.exp_timers[skill]['timer'] = Time.now if @settings.exp_timers[skill]

    case skill
    when 'Outdoorsmanship'
      train_outdoorsmanship
    when 'Augmentation', 'Warding', 'Utility', 'Debilitation'
      train_magic skill
    when 'First Aid'
      train_first_aid
    when 'Scholarship'
      train_scholarship
    when 'Astrology'
      train_astrology
    when 'Mechanical Lore'
      train_mechanical_lore
    when 'Athletics'
      train_athletics
    when 'Scouting'
      train_scouting
    when 'Attunement'
      train_attunement
    when 'Stealth'
      train_stealth
    when 'Thievery'
      train_thievery
    when 'Forging'
      train_forging
    when 'Appraisal'
      train_appraisal
    when 'Theurgy'
      train_theurgy
    when 'Perception'
      train_outdoorsmanship
    when 'Empathy'
      train_empathy
    when 'Locksmithing'
      train_locksmithing
    when 'Summoning'
      train_summoning
    when 'Performance'
      train_performance
    when 'Sorcery'
      train_sorcery
    else
      echo "#{skill} not implemented yet"
      pause 15
    end
  end

  def train_sorcery
    return if DRSkill.getrank('Sorcery').to_i > 70

    # TODO: Generalize this once we have more data points
    walk_to 705
    bput('get runestone', 'You get')
    until DRSkill.getxp('Sorcery').to_i >= 32
      bput('focus runestone', 'You focus your magical senses')
      waitrt?
    end
    bput('stow runestone', 'You put your')
  end

  def check_listening
    return unless @settings.listen
    return if listen?(@last_teacher)

    bput('assess teach', 'You assess the teaching environment')
    results = reget(20, 'is teaching a class')
    waitrt?

    classes = results.each_with_object({}) do |line, hash|
      matches = line.match(/(.*) is teaching a class on .* \(compared to what you already know\) (.*) which is still open to new students/)
      teacher = matches[1]
      skill = matches[2]
      hash[teacher] = skill unless teacher.nil? || skill.nil?
    end

    classes
      .delete_if { |_t, s| %w(Thievery Sorcery).include? s }
      .delete_if { |_t, s| DRStats.guild == 'Barbarian' && s == 'Arcana' }
      .sort_by { |_t, s| [DRSkill.getxp(s).to_i, DRSkill.getrank(s).to_i] }
      .find { |t, _s| listen?(t) }
  end

  def listen?(teacher)
    return false if teacher.nil? || teacher.empty?
    success = ['begin to listen', 'already listening'].include? DRC.bput("listen to #{teacher}", 'begin to listen', 'already listening', 'could not find who', 'You have no idea', 'isn\'t teaching a class', 'don\'t have the appropriate training', 'Your teacher appears to have left', 'isn\'t teaching you anymore')
    @last_teacher = teacher if success
    success
  end

  def train_summoning
    loop do
      case bput('summon weapon', 'You lack the resolve to summon a weapon', 'you draw out a')
      when 'You lack the resolve to summon a weapon'
        bput('summon admittance', 'You align yourself to it', 'further increasing your proximity')
      when 'you draw out a'
        break
      end
    end
    pause 1
    waitrt?
    fput("break #{checkright}") until checkright.nil?
    fput("break #{checkleft}") until checkleft.nil?
    fput 'pathway focus damage'
  end

  def train_locksmithing
    wait_for_script_to_complete('pick')
    wait_for_script_to_complete('sell-loot')
  end

  def train_theurgy
    wait_for_script_to_complete('theurgy')
  end

  def train_magic(skill)
    @settings.train_with_spells ? cast_spell(skill) : cast_nonspell(skill)
  end

  def ready_to_use?(exp_timers)
    return true unless exp_timers && exp_timers['timer']
    (Time.now - exp_timers['timer']).to_i > exp_timers['cooldown']
  end

  def cast_nonspell(skill)
    ability = @settings.training_nonspells[skill]
    echo("using ability: #{ability}") if UserVars.crossing_trainer_debug
    if ability.include?('Khri')
      if DRSpells.active_spells[ability]
        bput('khri med', 'You focus your mind', 'Your thoughts are clear and focused')
        waitrt?
      else
        fput('kneel') if @settings.kneel_khri
        bput(ability, *@settings.khri_preps)
        waitrt?
        fput('stand') if @settings.kneel_khri
      end
    else
      fput ability
    end
  end

  def calculate_mana(min, more, discern_data, cyclic)
    total = min + more
    total = (total * @settings.prep_scaling_factor).floor
    discern_data['mana'] = [(total / 4.0).ceil, min].max
    remaining = total - discern_data['mana']
    if remaining > @settings.cambrinth_cap
      discern_data['mana'] = discern_data['mana'] + (remaining - @settings.cambrinth_cap)
      remaining = total - discern_data['mana']
    end
    if cyclic
      discern_data['cambrinth'] = nil
      discern_data['mana'] = discern_data['mana'] + remaining
    elsif remaining > 0
      discern_data['cambrinth'] = []
      step_size = (remaining / 3.0).ceil
      while remaining > 0
        discern_data['cambrinth'] << [remaining, step_size].min
        remaining -= step_size
      end
    else
      discern_data['cambrinth'] = nil
    end
  end

  def set_preps(data)
    UserVars.discerns = {} unless UserVars.discerns
    discern_data = UserVars.discerns[data['abbrev']] || {}
    if data['symbiosis']
      if discern_data.empty? || discern_data['min'].nil?
        /requires at minimum (\d+) mana streams/ =~ bput("discern #{data['abbrev']}", 'requires at minimum \d+ mana streams')
        discern_data['mana'] = Regexp.last_match(1).to_i
        discern_data['cambrinth'] = nil
        discern_data['min'] = Regexp.last_match(1).to_i
        discern_data['more'] = 0
      end
      calculate_mana(discern_data['min'], discern_data['more'], discern_data, false)
    elsif discern_data.empty? || Time.now - discern_data['time_stamp'] > 24 * 60 * 60
      discern_data['time_stamp'] = Time.now
      case discern = bput("discern #{data['abbrev']}", 'The spell requires at minimum \d+ mana streams and you think you can reinforce it with \d+ more', 'You don\'t think you are able to cast this spell')
      when /you don't think you are able/i
        discern_data['mana'] = 1
        discern_data['cambrinth'] = nil
      else
        discern =~ /minimum (\d+) mana streams and you think you can reinforce it with (\d+) more/i
        calculate_mana(Regexp.last_match(1).to_i, Regexp.last_match(2).to_i, discern_data, data['cyclic'])
      end
    end
    pause 1
    waitrt?
    UserVars.discerns[data['abbrev']] = discern_data
    data['mana'] = discern_data['mana']
    data['cambrinth'] = discern_data['cambrinth']
  end

  def cast_spell(skill)
    pause 0.5 while checkmana < 40

    Flags.reset('ct-spellcast')
    data = @settings.training_spells[skill]
    set_preps(data)
    if data['abbrev'] =~ /^comp/i
      walk_to 991
      fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
    end

    if (data['abbrev'] =~ /locat/i) && (!DRSpells.active_spells['Clear Vision'])
      fput('prep cv')
      pause 5
      fput('cast')
    end

    fput('release gj') if data['cyclic'] && DRSpells.active_spells['Glythtide\'s Joy']
    fput('release care') if data['cyclic'] && DRSpells.active_spells['Caress of the Sun']

    fput "remove #{@settings.cambrinth}" if @settings.held_cambrinth && data['cambrinth']

    bput('prep symb', 'You recall the exact details of the Chaos symbiosis', 'But you\'ve already prepared') if data['symbiosis']

    scaled_prep_mana = data['mana']
    bput("prepare #{data['abbrev']} #{scaled_prep_mana}", *@settings.prep_messages)
    if data['cambrinth']
      data['cambrinth'].each do |mana|
        bput "charge my #{@settings.cambrinth} #{mana}", '^You harness a'
        waitrt?
      end
      bput "invoke my #{@settings.cambrinth}", 'You reach for its center', 'Your link to the'
    end

    pause 0.5 until Flags['ct-spellcast']

    snapshot = DRSkill.getxp(skill).to_i if data['symbiosis']

    Flags.add('ct-spell-fail', 'Currently lacking the skill to complete the pattern', 'backfires')

    while DRSpells.prep_spell
      data['before'].each { |action| bput(action['message'], action['matches']) }
      fput(data['cast'] || 'cast')
      data['after'].each { |action| bput(action['message'], action['matches']) }
    end

    fput "wear my #{@settings.cambrinth}" if @settings.held_cambrinth && data['cambrinth']
    if data['symbiosis']
      start = Time.now
      until snapshot != DRSkill.getxp(skill).to_i || Time.now - start > 10
        pause 0.5
      end
      if Flags['ct-spell-fail']
        fput('rel symb')
      elsif DRSkill.getxp(skill).to_i - snapshot <= 1
        @settings.discerns[data['abbrev']]['more'] = @settings.discerns[data['abbrev']]['more'] + 1
      end
    end
  end

  def braid_to_fail(item)
    forage(item)
    loop do
      waitrt?
      case bput("braid my #{item}", 'You Need to have more', 'Roundtime', 'You need both hands to do that')
      when 'Roundtime'
        rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
        break if rt >= 8 || DRSkill.getxp('Mechanical Lore').to_i >= 34
      when 'You need both hands to do that'
        waitrt?
        if checkleft == item
          dispose_trash(item)
        else
          fput 'swap'
        end
      else
        forage item
      end
    end
    pause 1
    waitrt?
    bput("pull my #{item}", 'You tug and pull')
    pause 1
    waitrt?
    dispose_trash(checkright) while %w(vine rope vines grass).include?(checkright)
    dispose_trash(checkleft) while %w(vine rope vines grass).include?(checkleft)
  end

  def train_performance
    play_zill
    Flags.add('ct-song', 'you finish playing')
    pause 1 until Flags['ct-song']
  end

  def train_outdoorsmanship
    if DRSkill.getrank('Outdoorsmanship').to_i < 30
      forage('rock')
      dispose_trash 'rock'
    else
      item = DRSkill.getrank('Outdoorsmanship').to_i < 200 ? 'rock' : 'vine' # When can you collect vines?
      item = 'georin grass' if DRSkill.getrank('Outdoorsmanship').to_i >= 300
      case bput("collect #{item}", 'You manage to collect', 'The room is too cluttered to find anything here')
      when 'The room is too cluttered to find anything here'
        kick_pile
      end
      waitrt?
      kick_pile
    end
  end

  def kick_pile
    case bput('kick pile', 'kick while sitting', 'I could not find', 'take a step back and run up to')
    when 'kick while sitting'
      fput('stand')
      kick_pile
    end
  end

  def train_first_aid
    return if DRSkill.getrank('Scholarship').to_i < 40
    play_zill
    fput 'get my compendium'
    start_text = bput('look compendium', '^The compendium lies open to the section on (.*) physiology')
    start_text =~ /^The compendium lies open to the section on (.*) physiology/i
    start = Regexp.last_match(1)
    attempts = 0
    loop do
      study = bput('study my compendium', 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying')
      waitrt?
      attempts += 1
      break if DRSkill.getrank('Scholarship').to_i < 50
      next if study =~ /^you attempt/i && attempts < 2
      attempts = 0
      match_text = bput 'turn my compendium', '^You turn to the section containing (.*) physiology'
      match_text =~ /^You turn to the section containing (.*) physiology/i
      match = Regexp.last_match(1)
      break if start == match || DRSkill.getxp('First Aid').to_i >= 34
    end
    empty_hands
    stop_play
  end

  def train_scholarship
    play_zill
    fput 'get my black book'
    14.times do |count|
      bput("turn book to page #{count + 1}", 'You turn your book to page', 'You are already on')
      bput('study my book', 'roundtime')
      waitrt?
    end
    empty_hands
    stop_play
  end

  def train_mechanical_lore
    empty_hands
    fput "remove #{@settings.hand_armor}"
    fput "stow #{@settings.hand_armor}"
    braid_to_fail(DRSkill.getrank('Outdoorsmanship').to_i < 110 ? 'grass' : 'vine')
    empty_hands
    fput "get my #{@settings.hand_armor}"
    fput "wear my #{@settings.hand_armor}"
  end

  def climb(room_number, climb_target)
    walk_to room_number
    fput "climb #{climb_target}" if DRRoom.npcs.length < 3
    waitrt?
  end

  def train_athletics
    empty_hands
    [[835, 'embrasure'], [1035, 'wall'], [1039, 'wall'], [1040, 'wall'], [691, 'wall'], [943, 'break'], [943, 'embrasure'],
     [939, 'embrasure'], [1388, 'wall'], [938, 'embrasure'], [940, 'break'], [940, 'embrasure'], [1611, 'wall'],
     [1609, 'wall'], [1387, 'wall']].each { |room_number, climb_target| break if DRSkill.getxp('Athletics').to_i >= 34; climb(room_number, climb_target) }
  end

  def train_empathy
    [8266, 850, 7902, 19_077, 815, 793, 8265, 4652, 19_093, 19_078].each do |room_id|
      walk_to(room_id)
      until 'You sense:' == bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet')
        pause 1
        rt = waitrt?
        train_appraisal if rt.nil? || rt == 0
      end
      waitrt?
      break if DRSkill.getxp('Empathy').to_i >= 34
    end
  end

  def train_scouting
    walk_to 991
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
    walk_to 1378
    bput 'scout trail', 'You notice a trailmarker'
    bput 'go trail', 'You set off into the wild', 'That would be difficult'
    waitfor 'As your journey ends'
    pause 0.5 until Room.current.id
  end

  def train_attunement
    if DRStats.guild == 'Moon Mage'
      fput('perc mana')
      pause 15
      waitrt?
      return
    end
    %w(815 814 802 800 799 801 817 818).each do |roomid|
      walk_to roomid
      fput 'perc'
      waitrt?
      break if DRSkill.getxp('Attunement').to_i >= 34 || DRStats.guild == 'Moon Mage'
    end
  end

  def hide_in(room_number)
    walk_to room_number
    fput 'hide'
    waitrt?
    fput 'unhide'
    waitrt?
  end

  def train_stealth
    hide_in 851
    hide_in 850
    hide_in 764
    hide_in 5992
    hide_in 992
  end

  def train_thievery
    $EquipmentManager.wear_equipment_set('stealing')

    options = [
      { 'room' => 19_076, 'item' => 'water', 'min' => 0, 'trivial' => 41, 'hide' => true },
      { 'room' => 19_076, 'item' => 'alcohol', 'min' => 46, 'trivial' => 78, 'hide' => true },
      { 'room' => 19_077, 'item' => 'rose', 'min' => 10, 'trivial' => 52, 'hide' => true },
      { 'room' => 19_078, 'item' => 'pick', 'min' => 30, 'trivial' => 66, 'hide' => true },
      { 'room' => 19_073, 'item' => 'grey-brown feather', 'min' => 32, 'trivial' => 58, 'hide' => true },
      { 'room' => 8265, 'item' => 'bundling rope', 'min' => 0, 'trivial' => 32, 'hide' => true },
      { 'room' => 8265, 'item' => 'coin purse', 'min' => 32, 'trivial' => 58, 'hide' => true },
      { 'room' => 7904, 'item' => 'rugged glove', 'min' => 41, 'trivial' => 75, 'hide' => true },
      { 'room' => 19_240, 'item' => 'biscuit', 'min' => 46, 'trivial' => 83, 'hide' => true },
      { 'room' => 19_241, 'item' => 'scraping reed', 'min' => 60, 'trivial' => 115, 'hide' => true }
    ]

    thievery_skill = DRSkill.getrank('Thievery').to_i

    targets = options.select { |data| data['min'] <= thievery_skill && data['trivial'] > thievery_skill }

    targets.each { |target| steal(target) }

    $EquipmentManager.wear_equipment_set('standard')
  end

  def steal(target)
    return unless walk_to(target['room'], false)
    if target['hide'] && @settings.hide_to_steal
      fput 'hide'
      waitrt?
    end
    fput "steal #{target['item']}"
    waitrt?
    fput "steal #{target['item']}" if DRSkill.getrank('Thievery').to_i - target['min'] > 15
    move 'out'
    fput "drop my #{target['item']}" while checkright || checkleft
  end

  def train_appraisal
    empty_hands
    bput('remove my zill', 'You slide')
    bput('assess my zill', 'you carefully look them over')
    waitrt?
    bput('wear my zill', 'You slide')
  end

  def train_astrology
    fput('pre pg 5')
    fput('predict weather')
    pause 2
    waitrt?
    fput('cast')
    [%w(sun survival), %w(yavash magic), %w(xibar lore), %w(katamba defense)].each do |body, skill|
      case bput("observe #{body}", 'Your search for', 'roundtime')
      when /roundtime/i
        pause 2
        waitrt?
        bput("align #{skill}", 'You focus internally')
        waitrt?
        bput('predict future', 'roundtime')
        waitrt?
        bput('predict anal', 'roundtime')
        waitrt?
        return
      end
    end
  end

  # https://elanthipedia.play.net/mediawiki/index.php/Blacksmithing_Products
  def train_forging
    rank = DRSkill.getrank('Forging').to_i
    if rank <= 25 # Tier 1	Extremely Easy
      smelt_bronze
    elsif rank <= 50 # Tier 2	Very Easy
      forge(6, 3, 'mug', true)
    elsif rank <= 100 # Tier 3	Easy
      forge(6, 7, 'scratcher', true)
    elsif rank <= 200 # Tier 4	Simple
      forge(6, 11, 'band', true)
    elsif rank <= 300 # Tier 5	Basic
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: lockpick ring
    elsif rank <= 425 # Tier 6	Somewhat Challenging
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: armband
    elsif rank <= 550 # Tier 7	Challenging
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: clippers
    elsif rank <= 700 # Tier 8	Complicated
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: triangular wire sieve, bent <metal> scissors, knobby sewing needles, squat knitting needles, narrow <metal> awl
    elsif rank <= 850 # Tier 9	Intricate
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: beveled wood shaper, serrated hide scraper, compact <metal> awl, compact <metal> awl, round pestle
    elsif rank <= 1175 # Tier 10	Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: slender <metal> awl, serrated scissors, grooved pestle, oblong wire sieve
    elsif rank <= 1400 # Tier 11	Very Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: jagged wood shaper, thin sewing needles
    else # Tier 12	Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: trapezoidal wire sieve
    end
  end

  def has_crucible?
    ['nothing in there', 'molten bronze'].include?(bput('look in cruc', 'nothing in there', 'molten bronze', 'you see'))
  end

  def has_anvil?
    ['surface looks clean and ready'].include?(bput('look on anvil', 'surface looks clean and ready', 'anvil you see'))
  end

  def find_anvil
    find_empty_room([8909, 8910, 8911, 8777, 8778, 760], 8775, proc { has_anvil? })
  end

  def forge(chapter, page, item, trash_ingot)
    buy_bronze_ingot
    fput('stow my ingot')

    find_anvil

    wait_for_script_to_complete('forge', ['trash', 'blacksmithing', chapter, page, 'bronze', item])

    # Handle the case in which forge fails (i.e. due to running out of oil)
    dispose_trash(checkright) until checkright.nil? if checkright.include? item
    dispose_trash(checkleft) until checkleft.nil? if checkleft.include? item

    return unless trash_ingot
    fput('get my bronze ingot')
    dispose_trash('ingot')
  end

  def buy_bronze_ingot
    ensure_copper_on_hand(700)
    walk_to 8775
    fput('order 11')
    fput('order 11')
  end

  def smelt_bronze
    buy_bronze_ingot

    find_empty_room([8774, 19_030, 8773, 8777, 8779], 8775, proc { has_crucible? })

    fput('tilt cruc')
    fput('tilt cruc')

    fput('put ingot in cruc')
    wait_for_script_to_complete('smelt')
    dispose_trash('ingot')
  end

  def stop_play
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing") unless Flags['ct-song']
    Flags['ct-song'] = true
  end

  def play_zill
    Flags.add('ct-song', 'you finish playing')
    UserVars.song = 'scales halt' unless UserVars.song
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some')
    when 'dirtiness may affect your performance'
      stop_play
      clean_zills
      play_zill
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      stop_play
      adjust_difficulty
      play_zill
    when 'You struggle to begin'
      UserVars.song = 'scales halt'
    end
  end

  def adjust_difficulty
    UserVars.song = @song_list[UserVars.song] || 'scales halt'
  end

  def clean_zills
    bput('remove my zills', 'You slide a pair')
    bput('get my cloth', 'You get a')

    until /a pair of/i =~ bput('wipe my zills with my cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
      until /you wring a dry/i =~ bput('wring my cloth', 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /a pair of/i =~ bput('clean my zills with my cloth', 'Roundtime', 'a pair of')
      pause 1
      waitrt?
    end

    bput('wear my zill', 'You slide a')
    bput('stow my cloth', 'You put your')
  end
end

# Call this last to avoid the need for forward declarations
$CROSSING_TRAINER = CrossingTraining.new
$CROSSING_TRAINER.main
