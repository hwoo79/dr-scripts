=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Before running this script for the first time, you MUST add a method for each of your characters which sets the following CombatVars and UserVars (change the values to match your needs):
    CombatVars.weapon_training = { ... }
    UserVars.gear = [ ... ]
    UserVars.gear_sets = { ... }
    CombatVars.worn_items = '...'

  Use the description for an item, "a steel bastard sword" not "bastard sword" or "sword". You can see this by glancing at the item in your hand.

  Your new method MAY also need to override any CombatVars set in baseline_setup.
  * Be sure not to change baseline_setup itself, as this is common to all characters.
  * See below for some example methods for various guilds.
  * Be aware of the difference in overwriting something that was set in baseline_setup vs updating it.
    * This will insert a new key or replace the key if it exists in a hash: CombatVars.buff_spells["See the Wind"] = { ... }
    * This will overwrite a hash: CombatVars.buff_spells = { "See the Wind" => { ... } }
    * This will append to an array: CombatVars.offensive_spells << { ... }
    * This will overwrite an array: CombatVars.offensive_spells = [ ... ]
  * You can turn on debug mode by setting CombatVars.combat_trainer_debug = true
=end

class CombatTrainerSetup
  include DRC

  def main(args:[])
    if UserVars.use_yaml
      should_debug = args.delete('debug')
      should_app = args.delete('app')
      darg = args.find { |arg| arg =~ /d\d+/ }
      args.delete(darg) if darg
      rarg = args.find { |arg| arg =~ /r\d+/ }
      args.delete(rarg) if rarg

      CombatVars.set(get_settings(args))

      debug if should_debug
      set_dance(darg) if darg
      set_retreat(rarg) if rarg
      app if should_app
    else
      baseline_setup

      case checkname
      when 'Etreu' # Ranger
        etreu
        etreu_backtrain if args.include? 'back'
      when 'Menacra' # Cleric
        menacra
        menacra_undead if args.include? 'undead'
        menacra_defend if args.include? 'defend'
      when 'Selanas' # Empath
        selanas
      when 'Sarikis' # Moon Mage
        sarikis
      when 'Thurmond' # Bard
        thurmond
        thurmond_back if args.include? 'back'
      when 'Sheltim' # Barbarian
        sheltim
        app
        debug
      when 'Torgro' # Warrior Mage
        torgro
        torgro_backtrain if args.include? 'back'
        app
        debug
      else
        echo "***DON'T USE THE BASELINE PROFILE***"
        echo 'Open and edit combat-trainer-setup.lic'
      end
      if UserVars.export
        UserVars.export = CombatVars
        return
      end
      debug if args.include? 'debug'
      darg = args.find { |arg| arg =~ /d\d+/ }
      set_dance(darg) if darg
      rarg = args.find { |arg| arg =~ /r\d+/ }
      set_retreat(rarg) if rarg
      app if args.include? 'app'
    end

    start_script('combat-trainer')
    pause 0.25 while running?('combat-trainer')

    $COMBAT_TRAINER = CombatTrainer.new
    $COMBAT_TRAINER.main(CombatVars)
  end

  def baseline_setup
    # Actions to fill aiming time with
    CombatVars.aim_fillers = {
      'Crossbow' => %w(bob bob),
      'Bow' => %w(bob bob)
    }

    # If this exists it will use these actions while stealth exp is not capped
    CombatVars.aim_fillers_stealth = {
      'Bow' => %w(bob hide)
    }

    CombatVars.lootables = %w(bolt arrow coin) + UserVars.treasure_nouns + UserVars.gem_nouns

    # Leave a skill undefined to allow the script to balance defenses for learning
    # For skills that must use a certain defense arrangement you can specify the ordering of defenses with an array.
    # ["parry", "evasion"] = 100 parry 80 evasion
    # ["evasion", "parry"] = 100 evasion 80 parry
    CombatVars.stances = {
      'Bow' => %w(evasion shield),
      'Crossbow' => %w(evasion shield),
      'Slings' => %w(evasion shield),
      'Offhand Weapon' => %w(evasion shield)
    }

    CombatVars.offensive_spells = []
    CombatVars.buff_spells = {}
    CombatVars.buff_nonspells = {}

    CombatVars.skinning = {
      'skin' => true, # Set this to false to disable all skinning
      'arrange_all' => false, # Do you have the ability to arrange all?
      'arrange_count' => 5 # Number of times to arrange, anything over max arranges is treated as max.
    }

    # Worn chargable cambrinth
    CombatVars.cambrinth = 'armband'

    # Which charged maneuvers to use - this will be ignored for weapon skills that are not trained
    # https://elanthipedia.play.net/mediawiki/index.php/Combat_Maneuvers#Charged_Maneuvers
    CombatVars.charged_maneuvers = {
      'Brawling' => 'palmstrike',
      'Bow' => 'powershot',
      'Crossbow' => 'powershot',
      'Slings' => 'powershot',
      'Small Edged' => 'cleave',
      'Large Edged' => 'cleave',
      'Twohanded Edged' => 'cleave',
      'Small Blunt' => 'crash',
      'Large Blunt' => 'crash',
      'Twohanded Blunt' => 'crash',
      'Staves' => 'twirl',
      'Polearms' => 'impale'
    }

    # The number of enemies to always keep in the room, no offensive actions are taken until there are more creatures then this.
    CombatVars.dance_threshold = 1

    # The skill to use when dancing, preferrably something that can block or parry as needed.
    # This must be a skill that is being trained (i.e. defined in CombatVars.weapon_training)
    CombatVars.dance_skill = 'Large Edged'

    CombatVars.dance_actions = ['bob']

    # If this exists it will use these actions while stealth exp is not capped
    CombatVars.dance_actions_stealth = []

    CombatVars.training_abilities = { 'Hunt' => { check: 'Perception', cooldown: 80 } }

    # The messages you receive when casting spells without roundtimes. (buffs, etc.)
    CombatVars.cast_messages = ['^You gesture', 'You reach with both', 'You listen intently to the air', 'You close your eyes', 'You close yours eyes', 'Your target pattern dissipates', 'You make a holy gesture', 'You raise your left hand skyward', 'Flickering shadows tear away', 'You sense a Malediction', 'You release an accompaniment', 'You roll your hands in an elliptical pattern', 'You cup your hand']

    CombatVars.prep_messages = ['You begin chanting a psalm', 'With meditative movements you', 'You raise your head skyward', 'With tense movements', 'You trace (an|a) (.*) sigil in the air', 'Slow, rich tones form']

    # The fatigue threshold at which the script will stop attacking and regain fatigue
    CombatVars.fatigue_regen_threshold = 90

    # See https://elanthipedia.play.net/mediawiki/index.php/Combat_maneuvers for actions that are good candidates
    # For example, "bob" trains Tactics, but does no damage, whereas "feint" does damage, but without training an additional skill
    CombatVars.fatigue_regen_action = 'bob'
  end

  def app
    CombatVars.training_abilities['App'] = { check: 'Appraisal', cooldown: 60 }
  end

  def etreu
    CombatVars.weapon_training = {
      'Bow' => 'an osage battle longbow',
      'Small Edged' => 'a steel scimitar adorned with an opal pommel'
    }

    CombatVars.aim_fillers['Bow'] = %w(bob analyze bob)
    CombatVars.aim_fillers_stealth = {
      'Bow' => %w(bob hide bob)
    }

    CombatVars.fatigue_regen_action = 'analyze'

    CombatVars.skinning['arrange_all'] = true
    CombatVars.skinning['arrange_count'] = 1

    CombatVars.dual_load = true
    CombatVars.charged_maneuvers.delete('Bow')

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }

    CombatVars.dance_actions_stealth = %w(hide stalk analyze feint bob)

    CombatVars.buff_spells = {

      'Instinct' => { 'abbrev' => 'inst', 'recast' => 1, 'mana' => 10, 'cambrinth' => [5, 5] },
      'Hands of Lirisa' => { 'abbrev' => 'hol', 'recast' => 1, 'mana' => 10, 'cambrinth' => [5, 5] },
      'Sense of the Tiger' => { 'abbrev' => 'sott', 'recast' => 1, 'mana' => 10, 'cambrinth' => [5, 5] },
      'Skein of Shadows' => { 'abbrev' => 'sks', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5, 5] },
      'Claws of the Cougar' => { 'abbrev' => 'cotc', 'recast' => -1, 'mana' => 15, 'cambrinth' => [5, 5] }
    }

    CombatVars.offensive_spells = [
      # { 'skill' => 'Targeted Magic', 'name' => "Eagle's Cry", 'abbrev' => 'ec', 'mana' => 10 },
      { 'skill' => 'Debilitation', 'name' => 'Devolve', 'abbrev' => 'de', 'mana' => 14, 'expire' => 'which evaporate quickly into the air', 'harmless' => true },
      { 'skill' => 'Debilitation', 'name' => 'Cotw', 'abbrev' => 'cotw', 'mana' => 16, 'expire' => 'dissolving into a hazy green mist that soon vanishes', 'harmless' => true }
    ]

    CombatVars.dance_actions = %w(analyze feint bob)

    CombatVars.dance_skill = 'Small Edged'

    CombatVars.fatigue_regen_threshold = 85

    UserVars.gear = [
      DRC::Item.new(name: 'balaclava', leather: false, hinders_locks: true, description: 'a lumium chain balaclava crafted from tempered links'),
      DRC::Item.new(name: 'gloves', leather: false, hinders_locks: true, description: 'some lumium mail gloves'),
      DRC::Item.new(name: 'gloves', leather: true, hinders_locks: true, description: 'some rugged gloves'),
      DRC::Item.new(name: 'targe', leather: true, hinders_locks: true, description: 'a shalswar-hide targe sealed with protective wax'),
      DRC::Item.new(name: 'leathers', leather: true, description: 'some thick shalswar-hide leathers with fitted seams'),
      DRC::Item.new(name: 'parry stick', leather: false, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'knuckles', leather: false, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, description: 'some silver-chased elbow spikes'),

      DRC::Item.new(name: 'longbow', leather: false, description: 'an osage battle longbow'),
      DRC::Item.new(name: 'sword', leather: false, worn: false, description: 'a bastard sword', swappable: true),
      DRC::Item.new(name: 'scimitar', leather: false, worn: false, description: 'a (?:\w+\s)?steel scimitar adorned with an opal pommel')
    ]

    UserVars.gear_sets = {
      'standard' => [
        'a lumium chain balaclava crafted from tempered links',
        'some lumium mail gloves',
        'a shalswar-hide targe sealed with protective wax',
        'some thick shalswar-hide leathers with fitted seams',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes',
        'an osage battle longbow'
      ],
      'naked' => [
      ]
    }

    CombatVars.worn_items = 'standard'
  end

  def etreu_backtrain
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Large Edged' => 'sword',
      'Small Blunt' => 'bola',
      'Light Thrown' => 'bola',
      'Twohanded Edged' => 'sword',
      'Offhand Weapon' => 'bola'
    }

    CombatVars.dance_skill = 'Large Edged'

    CombatVars.skinning['skin'] = false

    CombatVars.buff_spells = {}
    CombatVars.offensive_spells = {}
    CombatVars.buff_spells['Instinct'] = { 'abbrev' => 'inst', 'recast' => 1, 'mana' => 6, 'cambrinth' => [14] }
    CombatVars.buff_spells['Claws of the Cougar'] = { 'abbrev' => 'cotc', 'recast' => -1, 'mana' => 15, 'cambrinth' => [6] }

    CombatVars.dance_threshold = 0
  end

  def thurmond
    UserVars.gear = [
      DRC::Item.new(name: 'parry stick', leather: false, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'gloves', leather: false, hinders_locks: true, description: 'some metal chain gloves'),
      DRC::Item.new(name: 'balaclava', leather: false, hinders_locks: true, description: 'a metal chain balaclava'),
      DRC::Item.new(name: 'shirt', leather: false, description: 'a chain shirt'),
      DRC::Item.new(name: 'knuckles', leather: false, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, description: 'some silver-chased elbow spikes'),
      DRC::Item.new(name: 'shield', leather: false, hinders_locks: true, description: 'a metal target shield'),
      DRC::Item.new(name: 'greaves', leather: true, hinders_locks: true, description: 'some metal chain greaves'),

      DRC::Item.new(name: 'crossbow', leather: false, description: 'a lever-drawn light crossbow'),
      DRC::Item.new(name: 'sword', leather: false, worn: false, description: 'a steel war sword', swappable: true),
      DRC::Item.new(name: 'sledgehammer', leather: false, worn: false, description: 'a pine-handled sledgehammer'),
      DRC::Item.new(name: 'bola', leather: false, worn: false, description: 'a triple-weighted bola')
    ]

    UserVars.gear_sets = {
      'standard' => [
        'some metal chain greaves',
        'a metal target shield',
        'a chain shirt',
        'a metal chain balaclava',
        'some metal chain gloves',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes',
        'a lever-drawn light crossbow'
      ],
      'naked' => [
      ]
    }

    CombatVars.worn_items = 'standard'

    CombatVars.weapon_training = {
      'Offhand Weapon' => 'a triple-weighted bola',
      'Small Blunt' => 'a triple-weighted bola',
      'Light Thrown' => 'a triple-weighted bola',
      'Large Edged' => 'a steel war sword',
      'Large Blunt' => 'a pine-handled sledgehammer',
      'Twohanded Edged' => 'a steel war sword',
      'Brawling' => '',
      'Crossbow' => 'a lever-drawn light crossbow'
    }

    CombatVars.fatigue_regen_action = 'bob'

    CombatVars.skinning['arrange_all'] = false
    CombatVars.skinning['arrange_count'] = 0

    CombatVars.aim_fillers['Crossbow'] = %w(bob analyze bob)

    CombatVars.charged_maneuvers.delete('Bow')
    CombatVars.charged_maneuvers.delete('Crossbow')

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }
    CombatVars.training_abilities['Scream'] = { check: 'Bardic Lore', cooldown: 15 }

    CombatVars.offensive_spells = [
      { 'skill' => 'Targeted Magic', 'name' => 'Breath of Storms', 'abbrev' => 'bos', 'mana' => 6 },
      { 'skill' => 'Debilitation', 'name' => 'DMRS', 'abbrev' => 'dmrs', 'mana' => 6 }
      # { 'skill' => 'Debilitation', 'name' => 'Aether Wolves', 'abbrev' => 'aewo', 'mana' => 4, 'cyclic' => true, 'expire' => 'unknown message here', 'harmless' => true }
    ]

    CombatVars.dance_actions = %w(analyze feint bob)

    CombatVars.dance_skill = 'Large Edged'

    CombatVars.fatigue_regen_threshold = 85
  end

  def menacra
    UserVars.gear = [
      DRC::Item.new(name: 'parry stick', leather: false, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'gloves', leather: false, hinders_locks: true, description: 'some metal scale gloves'),
      DRC::Item.new(name: 'cowl', leather: true, hinders_locks: true, description: 'a rugged leather cowl'),
      DRC::Item.new(name: 'shirt', leather: false, description: 'a lightened chain shirt'),
      DRC::Item.new(name: 'knuckles', leather: false, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, description: 'some silver-chased elbow spikes'),
      DRC::Item.new(name: 'greaves', leather: true, hinders_locks: true, description: 'some metal scale greaves'),

      DRC::Item.new(name: 'crossbow', leather: false, description: 'a laminated oak and horn crossbow with a blued steel cranequin'),
      DRC::Item.new(name: 'sword', leather: false, worn: false, description: 'a bastard sword', swappable: true),
      DRC::Item.new(name: 'hammer', leather: false, worn: false, description: 'a long-handled throwing hammer with a steel head bearing the crest of the Clerics\' Guild')
    ]

    UserVars.gear_sets = {
      'standard' => [
        'some metal scale greaves',
        'a lightened chain shirt',
        'a rugged leather cowl',
        'some metal scale gloves',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes',
        'a laminated oak and horn crossbow with a blued steel cranequin'
      ],
      'naked' => [
      ]
    }

    CombatVars.worn_items = 'standard'

    CombatVars.weapon_training = {
      'Brawling' => '',
      'Crossbow' => 'a laminated oak and horn crossbow with a blued steel cranequin',
      'Large Edged' => 'a bastard sword',
      'Large Blunt' => 'a long-handled throwing hammer with a steel head bearing the crest of the Clerics\' Guild',
      'Heavy Thrown' => 'a long-handled throwing hammer with a steel head bearing the crest of the Clerics\' Guild'
    }

    CombatVars.skinning['arrange_count'] = 0
    CombatVars.skinning['arrange_types'] = { 'rat' => 'part' }

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }
    CombatVars.training_abilities['Pray'] = { check: 'Theurgy', cooldown: 610 }

    CombatVars.buff_spells['Shield of Light'] = { 'abbrev' => 'sol', 'recast' => 3, 'mana' => 15, 'cambrinth' => [5, 5], 'after' => proc { bput('wear shield', 'your shield dissolves', 'you are already wearing') } }
    CombatVars.buff_spells['Benediction'] = { 'abbrev' => 'benediction', 'recast' => 1, 'mana' => 10, 'cambrinth' => [5, 5] }
    CombatVars.buff_spells['Major Physical Protection'] = { 'abbrev' => 'MAPP', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
    CombatVars.buff_spells['Minor Physical Protection'] = { 'abbrev' => 'MPP', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
    CombatVars.buff_spells['Centering'] = { 'abbrev' => 'Centering', 'recast' => 1, 'mana' => 15, 'cambrinth' => [8, 7] }

    CombatVars.cambrinth = 'armband'

    CombatVars.dance_actions = %w(bob bob bob bob)

    CombatVars.offensive_spells = [
      { 'skill' => 'Targeted Magic', 'name' => 'Fists of Faenella', 'abbrev' => 'ff', 'mana' => 12 },
      { 'skill' => 'Debilitation', 'name' => 'Malediction', 'abbrev' => 'maled', 'mana' => 15, 'expire' => 'The swirling confines of malevolent darkness', 'harmless' => true },
      { 'skill' => 'Debilitation', 'name' => 'Soul Sickness', 'abbrev' => 'sick', 'mana' => 10, 'expire' => 'The spiritual weight lifts off', 'harmless' => true }
    ]

    CombatVars.dance_threshold = 0
  end

  def sarikis
    UserVars.gear = [
      DRC::Item.new(name: 'parry stick', leather: false, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'gloves', leather: true, hinders_locks: true, description: 'some rugged gloves'),
      DRC::Item.new(name: 'cowl', leather: true, hinders_locks: true, description: 'a rugged leather cowl'),
      DRC::Item.new(name: 'leathers', leather: true, description: 'some sinuous black leathers'),
      DRC::Item.new(name: 'knuckles', leather: false, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, description: 'some silver-chased elbow spikes'),
      DRC::Item.new(name: 'shield', leather: false, description: 'a metal target shield'),

      DRC::Item.new(name: 'crossbow', leather: true, description: 'a lever-drawn light crossbow'),
      DRC::Item.new(name: 'dagger', leather: false, worn: false, description: 'a wide-bladed dagger'),
      DRC::Item.new(name: 'bola', leather: false, worn: false, description: 'a triple-weighted bola')
    ]

    UserVars.gear_sets = {
      'standard' => [
        'some sinuous black leathers',
        'a metal target shield',
        'a rugged leather cowl',
        'some rugged gloves',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes',
        'a lever-drawn light crossbow'
      ],
      'naked' => [
      ]
    }

    CombatVars.worn_items = 'standard'

    CombatVars.weapon_training = {
      'Brawling' => '',
      'Small Blunt' => 'a triple-weighted bola',
      'Small Edged' => 'a wide-bladed dagger',
      'Offhand Weapon' => 'a wide-bladed dagger',
      'Light Thrown' => 'a triple-weighted bola',
      'Crossbow' => 'a lever-drawn light crossbow'
    }

    CombatVars.skinning['arrange_count'] = 0

    CombatVars.dance_actions = %w(bob bob bob bob)

    CombatVars.dance_actions_stealth = %w(bob hide stalk bob)

    CombatVars.aim_fillers_stealth = {
      'Crossbow' => %w(bob hide)
    }

    CombatVars.dance_skill = 'Small Edged'

    CombatVars.charged_maneuvers.delete('Crossbow')

    # CombatVars.training_abilities['PercMana'] = { check: 'Attunement', cooldown: 60 * 2 }
    # CombatVars.training_abilities['Astro'] = { chec: 'Astrology', cooldown: 60 * 6 }

    CombatVars.offensive_spells = [
      # { 'skill' => 'Targeted Magic', 'name' => 'Dinazen Olkar', 'abbrev' => 'DO', 'mana' => 10 },
      # { 'skill' => 'Debilitation', 'name' => 'Sleep', 'abbrev' => 'Sleep', 'mana' => 7 }
    ]

    # CombatVars.buff_spells['Shadows'] = { 'abbrev' => 'shadows', 'recast' => 1, 'mana' => 5 }
    # CombatVars.buff_spells['Seer\'s Sense'] = { 'abbrev' => 'seer', 'recast' => 1, 'mana' => 14 }
    # CombatVars.buff_spells['Psychic Shield'] = { 'abbrev' => 'psy', 'recast' => 1, 'mana' => 5 }

    CombatVars.dance_threshold = 2

    CombatVars.lootables += UserVars.box_nouns
  end

  def set_dance(message)
    message =~ /d(\d+)/
    CombatVars.dance_threshold = Regexp.last_match(1).to_i
  end

  def set_retreat(message)
    message =~ /r(\d+)/
    CombatVars.retreat_threshold = Regexp.last_match(1).to_i
  end

  def menacra_undead
    CombatVars.buff_spells['Bless'] = { 'abbrev' => 'bless', 'recast' => 1, 'mana' => 25, 'cambrinth' => [5] }
    CombatVars.buff_spells['Protection from Evil'] = { 'abbrev' => 'pfe', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5] }
  end

  def menacra_defend
    CombatVars.offensive_spells = []
    CombatVars.dance_skill = 'Large Edged'
    CombatVars.dance_threshold = 3
  end

  def selanas
    CombatVars.weapon_training = {
      'Brawling' => ''
    }

    CombatVars.stances = {
      'Brawling' => %w(evasion shield)
    }

    CombatVars.buff_spells['Iron Constitution'] = { 'abbrev' => 'IC', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5, 5] }
    CombatVars.buff_spells['Refresh'] = { 'abbrev' => 'refresh', 'recast' => 1, 'mana' => 15, 'cambrinth' => [5, 5] }

    CombatVars.offensive_spells = [
      { 'skill' => 'Debilitation', 'name' => 'Lethargy', 'abbrev' => 'Lethargy', 'mana' => 9, 'harmless' => true },
      { 'skill' => 'Targeted Magic', 'name' => 'Paralysis', 'abbrev' => 'Paralysis', 'mana' => 7, 'harmless' => true }
    ]

    CombatVars.skinning = {
      'skin' => true, # Set this to false to disable all skinning
      'arrange_all' => false, # Do you have the ability to arrange all?
      'arrange_count' => 0 # Number of times to arrange, anything over max arranges is treated as max.
    }

    CombatVars.empath = { manipulate: true }

    CombatVars.charged_maneuvers = {}

    CombatVars.dance_threshold = 100

    CombatVars.dance_skill = 'Brawling'

    CombatVars.dance_actions = %w(bob circle bob bob)

    CombatVars.dance_actions_stealth = %w(bob hide stalk bob)
  end

  def sheltim
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Bow' => 'a Nisha short bow',
      'Large Edged' => 'a steel bastard sword',
      'Large Blunt' => 'a steel throwing hammer',
      'Heavy Thrown' => 'a steel throwing hammer',
      'Twohanded Blunt' => 'a crude flail made from knotted rags',
      'Twohanded Edged' => 'a steel bastard sword',
      'Offhand Weapon' => 'a steel throwing hammer'
    }

    UserVars.gear = [
      DRC::Item.new(name: 'gloves', leather: true, worn: true, hinders_locks: true, description: 'some coarse lava drake-hide gloves sealed with protective wax'),
      DRC::Item.new(name: 'cowl', leather: true, worn: true, hinders_locks: true, description: 'a coarse lava drake-hide cowl sealed with protective wax'),
      DRC::Item.new(name: 'targe', leather: true, worn: true, hinders_locks: true, description: 'a lava drake-hide targe with a reinforced design'),
      DRC::Item.new(name: 'leathers', leather: true, worn: true, description: 'some thick sharkskin leathers with a reinforced design'),
      DRC::Item.new(name: 'parry stick', leather: false, worn: true, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'knuckles', leather: false, worn: true, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, worn: true, description: 'some silver-chased elbow spikes'),

      DRC::Item.new(name: 'hammer', leather: false, worn: false, description: 'a steel throwing hammer'),
      DRC::Item.new(name: 'sword', leather: false, worn: false, description: 'a steel bastard sword', swappable: true),
      DRC::Item.new(name: 'flail', leather: false, worn: false, description: 'a crude flail made from knotted rags'),
      DRC::Item.new(name: 'bow', leather: false, worn: false, description: 'a Nisha short bow', tie_to: 'toolstrap')
    ]

    UserVars.gear_sets = {
      'standard' => [
        'some coarse lava drake-hide gloves sealed with protective wax',
        'a coarse lava drake-hide cowl sealed with protective wax',
        'a lava drake-hide targe with a reinforced design',
        'some thick sharkskin leathers with a reinforced design',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes'
      ]
    }

    CombatVars.worn_items = 'standard'

    CombatVars.skinning['arrange_count'] = 0

    CombatVars.dance_actions_stealth = []

    # Expire: You feel your inner fire cool as you finish practicing the Form of the Python.
    CombatVars.buff_nonspells['form python'] = 60 * 4

    # Expire: An aftershock of rage shudders through you one last time, before your fury crashes to a sudden halt!
    CombatVars.buff_nonspells['berserk earthquake'] = 60 * 1

    # Expire: You feel your inner fire cool as you finish practicing the Form of the Badger.
    CombatVars.buff_nonspells['form badger'] = 60 * 5

    CombatVars.lootables += UserVars.box_nouns
  end

  def torgro
    CombatVars.weapon_training = {
      'Brawling' => '',
      'Twohanded Edged' => 'a steel bastard sword',
      'Large Edged' => 'a steel bastard sword',
      'Large Blunt' => 'a steel throwing hammer',
      'Heavy Thrown' => 'a steel throwing hammer',
      'Crossbow' => 'a laminated oak and horn crossbow with a blued steel cranequin',
      'Polearms' => 'a steel bardiche'
    }

    UserVars.gear = [
      DRC::Item.new(name: 'gloves', leather: false, worn: true, hinders_locks: true, description: 'some steel ring gloves'),
      DRC::Item.new(name: 'balaclava', leather: false, worn: true, hinders_locks: true, description: 'a steel ring balaclava'),
      DRC::Item.new(name: 'buckler', leather: true, worn: true, hinders_locks: true, description: 'a storm-bull buckler'),
      DRC::Item.new(name: 'hauberk', leather: false, worn: true, description: 'a steel ring hauberk'),
      DRC::Item.new(name: 'parry stick', leather: false, worn: true, description: 'a polished steel parry stick'),
      DRC::Item.new(name: 'knuckles', leather: false, worn: true, hinders_locks: true, description: 'some brass knuckles'),
      DRC::Item.new(name: 'spikes', leather: false, worn: true, description: 'some silver-chased elbow spikes'),

      DRC::Item.new(name: 'bardiche', leather: false, worn: true, description: 'a steel bardiche'),
      DRC::Item.new(name: 'hammer', leather: false, worn: false, description: 'a steel throwing hammer'),
      DRC::Item.new(name: 'crossbow', leather: true, worn: false, description: 'a laminated oak and horn crossbow with a blued steel cranequin'),
      DRC::Item.new(name: 'sword', leather: false, worn: false, description: 'a steel bastard sword', swappable: true)
    ]

    UserVars.gear_sets = {
      'standard' => [
        'some steel ring gloves',
        'a steel ring balaclava',
        'a storm-bull buckler',
        'a steel ring hauberk',
        'a polished steel parry stick',
        'some brass knuckles',
        'some silver-chased elbow spikes',
        'a steel bardiche'
      ]
    }

    CombatVars.worn_items = 'standard'

    CombatVars.skinning['arrange_count'] = 0

    CombatVars.offensive_spells = [
      { 'skill' => 'Targeted Magic', 'name' => 'Fire Shards', 'abbrev' => 'fs', 'mana' => 20 },
      { 'skill' => 'Debilitation', 'name' => 'Anther\'s Call', 'abbrev' => 'anc', 'mana' => 20, 'harmless' => true }
    ]

    CombatVars.buff_spells = {
      # 'Ethereal Shield' => { 'abbrev' => 'ES', 'recast' => 1, 'mana' => 16 },
      # 'Tailwind' => { 'abbrev' => 'TW', 'recast' => 1, 'mana' => 16 },
      # 'Ignite' => { 'abbrev' => 'IG' },
      # 'Substratum' => { 'abbrev' => 'SUB', 'recast' => 1, 'mana' => 16 },
      'Ethereal Fissure' => { 'abbrev' => 'ETF', 'mana' => 15, 'cambrinth' => [7, 6], 'expire' => 'fissure collapses in on itself, winking out of existence', 'cast' => 'cast fire', 'recast' => -1 },
      'Sure Footing' => { 'abbrev' => 'SUF', 'recast' => 1, 'mana' => 15, 'cambrinth' => [12, 12] },
      'Manifest Force' => { 'abbrev' => 'MAF', 'recast' => 1, 'mana' => 15, 'cambrinth' => [12, 12] },
      'Swirling Winds' => { 'abbrev' => 'SW', 'recast' => 1, 'mana' => 15, 'cambrinth' => [12, 12] }
    }

    CombatVars.buff_nonspells['pathway focus quick'] = 60 * 5

    CombatVars.training_abilities['Perc'] = { check: 'Attunement', cooldown: 60 * 2 }

    CombatVars.dance_actions_stealth = []
    CombatVars.aim_fillers_stealth = {}

    CombatVars.charged_maneuvers = {}

    CombatVars.lootables += UserVars.box_nouns
  end

  def torgro_backtrain
    # CombatVars.weapon_training = {
    # }

    CombatVars.dance_skill = 'Crossbow'

    CombatVars.offensive_spells = []
    CombatVars.buff_nonspells = {}

    # UserVars.gear << []
  end

  def debug
    CombatVars.combat_trainer_debug = true
  end

  module CombatVars
    @@vars = {}
    def self.[](name)
      @@vars[name]
    end

    def self.set(val)
      @@vars = val
    end

    def self.reset
      @@vars = {}
    end

    def self.[]=(name, val)
      if val.nil?
        @@vars.delete(name)
      else
        @@vars[name] = val
      end
    end

    def self.list
      @@vars.dup
    end

    def self.method_missing(arg1, arg2 = '')
      if arg1[-1, 1] == '='
        if arg2.nil?
          @@vars.delete(arg1.to_s.chop)
        else
          @@vars[arg1.to_s.chop] = arg2
        end
      else
        @@vars[arg1.to_s]
      end
    end
  end
end

CombatTrainerSetup.new.main(args: variable.drop(1))
