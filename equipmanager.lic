=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Before running this script for the first time:
  * You can turn on debug mode with ;e UserVars.equipmanager_debug = true

  Use the description for an item, "a steel bastard sword" not "bastard sword" or "sword". You can see this by glancing at the item in your hand.

  EXAMPLES:
  UserVars.gear = [
    DRC::Item.new(name: 'gloves', leather: false, worn: true, hinders_locks: true, description: 'some steel ring gloves'),
    DRC::Item.new(name: 'balaclava', leather: false, worn: true, hinders_locks: true, description: 'a steel ring balaclava'),
    DRC::Item.new(name: 'buckler', leather: true, worn: true, hinders_locks: true, description: 'a storm-bull buckler'),
    DRC::Item.new(name: 'hauberk', leather: false, worn: true, description: 'a steel ring hauberk'),
  ]

  UserVars.gear_sets = {
    'standard' => [
      'some steel ring gloves',
      'a steel ring balaclava',
      'a storm-bull buckler',
      'a steel ring hauberk',
    ]
  }

  $EquipmentManager.wear_equipment_set('standard')
=end

class EquipmentManager
  include DRC

  def initialize
    UserVars.gear_sets = {} unless UserVars.gear_sets
    items
  end

  attr_accessor :items

  def items
    return @items if @items
    if UserVars.use_yaml
      settings = get_settings
      UserVars.gear_sets = settings['gear_sets']
      @armor_container = settings.armor_container
      @items = settings['gear'].map { |item| Item.new(description: item[:description], name: item[:name], leather: item[:is_leather], hinders_locks: item[:hinders_lockpicking], worn: item[:is_worn], swappable: item[:swappable], tie_to: item[:tie_to]) }
    else
      @items = UserVars.gear
    end
  end

  def remove_gear_by(&block)
    combat_items = get_combat_items
    gear = desc_to_items(combat_items).select { |item| block.call(item) }
    gear.each { |item| remove_item(item) }
    gear
  end

  def wear_items(items_list)
    items_list.each { |item| wear_item(item) }
  end

  def wear_equipment_set(set_name)
    worn_items = desc_to_items(UserVars.gear_sets[set_name])
    echo("expected worn items:#{worn_items.map(&:description).join(',')}") if UserVars.equipmanager_debug
    unless worn_items
      echo("Could not find gear set #{set_name}")
      return false
    end

    combat_items = get_combat_items

    remove_unmatched_items(combat_items, worn_items)

    lost_items = wear_missing_items(worn_items, combat_items)

    lost_items.empty? ? true : notify_missing(lost_items)
  end

  def desc_to_items(descs)
    descs.map { |description| item_by_desc(description) }.compact
  end

  def item_by_desc(description)
    items.find { |item| /#{item.description}/ =~ description }
  end

  def notify_missing(lost_items)
    beep
    echo 'MISSING EQUIPMENT: Please verify these items are in a closed container and not lost:'
    echo "#{lost_items.map(&:description).join(', ')}"
    pause
    beep
    false
  end

  def wear_missing_items(worn_items, combat_items)
    if UserVars.equipmanager_debug
      echo('wearing missing items between these two sets')
      echo("#{combat_items.join(',')}")
      echo("#{worn_items.map(&:description).join(',')}")
    end
    held = bput('glance', 'You glance .*') if checkleft || checkright

    missing_items = worn_items
                    .reject { |item| combat_items.find { |c_item| /#{item.description}/ =~ c_item } }
                    .reject { |item| /#{item.description}/ =~ held ? stow_weapon(item.name) : false }

    echo("wear missing items #{missing_items}") if !missing_items.empty? && UserVars.equipmanager_debug
    missing_items.reject { |item| wear_item(item) }
  end

  def remove_unmatched_items(combat_items, worn_items)
    if UserVars.equipmanager_debug
      echo('removing unmatched items between these two sets')
      echo("#{combat_items.join(',')}")
      echo("#{worn_items.map(&:description).join(',')}")
    end
    combat_items
      .select { |description| !worn_items.find { |item| /#{item.description}/ =~ description } }
      .map { |description| items.find { |item| /#{item.description}/ =~ description } }
      .compact
      .each { |item| remove_item(item) }
  end

  def get_combat_items
    bput('inv combat', 'Type INVENTORY HELP for more options')
    data = reget(30)
    data = data
           .map(&:strip)
           .reverse
           .take_while { |item| !['All of your combat:', "You aren't wearing anything like that."].include?(item) }
           .drop_while { |item| item != '[Type INVENTORY HELP for more options]' }
           .reverse
    data.pop
    data
  end

  def remove_item(item)
    bput("remove my #{item.name}", 'You ')
    waitrt?
    bput("stow my #{item.name}", 'You put')
    waitrt?
  end

  def wear_item(item)
    if item.nil?
      echo('failed to match an item, try turning on debugging with ;e UserVars.equipmanager_debug = true')
      return false
    end
    $ORDINALS.each do |ordinal|
      case bput("get my #{ordinal} #{item.name}", "^You get #{item.description}", '^You get ', '^What were you referring')
      when /^You get #{item.description}/
        fput("wear my #{item.name}")
        waitrt?
        return true
      when /^You get /
        fput("stow my #{item.name}")
      else
        return false
      end
    end
  end

  def wield_weapon(description, skill = nil, offhand = nil)
    weapon = item_by_desc(description)
    unless weapon
      echo("failed to match a weapon for #{description}")
      return
    end
    if checkleft || checkright
      held = bput('glance', 'You glance .*')
      if /#{weapon.description}/ !~ held
        stow_weapon
        get_item(weapon)
      end
    end

    get_item(weapon)

    swap_to_skill(weapon.name, skill) if skill && weapon.swappable
    fput('swap') if offhand && checkright
  end

  def get_item(item)
    if (item.tie_to && get_item_helper(item, :tied)) || (item.is_worn && get_item_helper(item, :worn)) || get_item_helper(item, :stowed)
      true
    else
      echo("Could not find #{item.description} anywhere.")
      false
    end
  end

  def return_held_gear(gear_set)
    return unless checkright || checkleft
    result = bput('glance', 'You glance down to see (.*) in your right hand and (.*) in your left hand', 'You glance down to see (.*) in your left hand', 'You glance down at your empty hands')
    return if result == 'You glance down at your empty hands'
    if result =~ /You glance down to see (.*) in your right hand and (.*) in your left hand/i
      right = Regexp.last_match(1)
      left = Regexp.last_match(2)
    elsif result =~ /You glance down to see (.*) in your left hand/i
      left = Regexp.last_match(1)
    end
    todo = []
    todo.push(left) if checkleft
    todo.push(right) if checkright

    worn_items = desc_to_items(UserVars.gear_sets[gear_set])

    todo.each do |held_item|
      if info = worn_items.find { |item| /#{item.description}/ =~ held_item }
        fput("wear my #{info.name}")
      else
        info = items.find { |item| /#{item.description}/ =~ held_item }
        if info.tie_to
          stow_helper("tie my #{info.name} to #{info.tie_to}", info.name, 'You attach')
        else
          stow_helper("stow my #{info.name}", info.name, 'You put')
        end
      end
    end
  end

  def verb_data(item)
    {
      worn: {
        verb: 'remove',
        matches: ["You sling #{item.description}", "You .* #{item.description}", /^You (get|sling|pull|work|loosen|slide|remove) /, 'Remove what'],
        failures: [/^You (get|sling|pull|work|slide|remove) $/],
        failure_recovery: proc { |noun| bput("wear my #{noun}", '^You ') },
        exhausted: ['Remove what']
      },
      tied: {
        verb: 'untie',
        matches: ["You remove #{item.description}", '^You remove', '^What were you referring', '^Untie what'],
        failures: ['You remove'],
        failure_recovery: proc { |_| stow_weapon },
        exhausted: ['What were you referring', 'Untie what']
      },
      stowed: {
        verb: 'get',
        matches: ["You sling #{item.description}", "You get #{item.description}", '^You get', '^What were you referring', 'But that is already'],
        failures: ['You get', /But that is already/],
        failure_recovery: proc { |noun| bput("stow my #{noun}", 'You put', 'But that is already in') },
        exhausted: ['What were you referring']
      }
    }
  end

  def get_item_helper(item, type)
    data = verb_data(item)[type]
    waitrt?
    $ORDINALS.each do |ordinal|
      case bput("#{data[:verb]} my #{ordinal} #{item.name}", *data[:matches])
      when *data[:exhausted]
        return false
      when *data[:failures]
        data[:failure_recovery].call(item.name)
      else
        return true
      end
    end
  end

  def swap_to_skill(noun, skill)
    proper_skill = case skill
                   when /^he$|heavy edge|large edge/i
                     'heavy edged'
                   when /2he|^the$|twohanded edge/i
                     'two-handed edged'
                   when /2hb|^thb$|twohanded blunt/i
                     'two-handed blunt'
                   when /^hb$|heavy blunt|large blunt/i
                     'heavy blunt'
                   else
                     echo('unsupported weapon swap, please help us add this weapon')
      end

    until " #{proper_skill} " == bput("swap my #{noun}", " #{proper_skill} ", " #{noun} ")
      pause 0.25
    end
  end

  def unload_weapon(name)
    bput("unload my #{name}", 'You unload')
    waitrt?
    bput('stow left', 'You put')
  end

  def stow_weapon(description)
    unless description
      return unless checkright || checkleft
      result = bput('glance', 'You glance down to see (.*) in your right hand and (.*) in your left hand', 'You glance down to see (.*) in your left hand', 'You glance down at your empty hands')
      return if result == 'You glance down at your empty hands'
      if result =~ /You glance down to see (.*) in your right hand and (.*) in your left hand/i
        right = Regexp.last_match(1)
        left = Regexp.last_match(2)
      elsif result =~ /You glance down to see (.*) in your left hand/i
        left = Regexp.last_match(1)
      end
      stow_weapon(right) if checkright
      stow_weapon(left)  if checkleft
      return
    end
    weapon = item_by_desc(description)
    return unless weapon
    if weapon.is_worn?
      stow_helper("wear my #{weapon.name}", weapon.name, 'You sling', 'You attach', 'You .* unload')
    elsif !weapon.tie_to.nil?
      stow_helper("tie my #{weapon.name} to #{weapon.tie_to}", weapon.name, 'You attach')
    else
      stow_helper("stow my #{weapon.name}", weapon.name, "You put .*#{weapon.name}", 'You .* unload')
    end
  end

  def stow_helper(action, weapon_name, *accept_strings)
    case bput(action, accept_strings)
    when /unload/
      unload_weapon(weapon_name)
      bput(action, accept_strings)
    end
  end
end

$EquipmentManager = EquipmentManager.new
