
class EquipmentManager
  include DRC

  def initialize
    UserVars.gear_sets = {} unless UserVars.gear_sets
  end

  def wear_equipment_set(set_name)
    items = UserVars.gear
    worn_items = UserVars.gear_sets[set_name].map{|description| items.find{|item| item.description == description } }.compact
    unless worn_items
      echo("Could not find gear set #{set_name}")
      return
    end

    combat_items = get_combat_items

    echo "#{combat_items}"
    echo "#{worn_items}"

    combat_items
      .select{|description| !worn_items.find{|item| item.description == description} }
      .map{|description| items.find{|item| item.description == description } }
      .compact
      .each{|item| remove_item(item) }

    held = bput('glance', 'You glance .*') if checkleft || checkright

    missing_items = worn_items
      .reject { |item| combat_items.include?(item.description)}
      .reject { |item| held.include?(item.description) ? fput("wear my #{item.name}") : false }


    lost_items = missing_items.reject { |item| wear_item(item) }

    return if lost_items.empty?

    beep
    echo 'MISSING EQUIPMENT: Please verify these items are in a closed container and not lost:'
    echo "#{lost_items.map(&:description).join(', ')}"
    pause
    beep
    pause
    beep
  end

  def get_combat_items
    bput('inv combat', 'Type INVENTORY HELP for more options')
    data = reget(30)
    data = data
           .map(&:strip)
           .reverse
           .take_while { |item| !['All of your combat:', "You aren't wearing anything like that."].include?(item) }
           .drop_while { |item| item != '[Type INVENTORY HELP for more options]' }
           .reverse
    data.pop
    data
  end

  def remove_item(item)
    bput("remove my #{item.name}", 'You ')
    bput("stow my #{item.name}", 'You ')
  end

  def wear_item(item)
    $ORDINALS.each do |ordinal|
      case bput("get my #{ordinal} #{item.name}", "^You get #{item.description}", '^You get ', '^What were you referring', 'You are already holding that')
      when /^You get #{item.description}/, /You are already holding that/
        fput("wear my #{item.name}")
        return true
      when /^You get /
        fput("stow my #{item.name}")
      else
        return false
      end
    end
  end

end

$EquipmentManager = EquipmentManager.new