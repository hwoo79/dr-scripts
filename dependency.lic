# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  **********
  For first time setup, see the Getting Started section of the repository README: https://github.com/rpherbig/dr-scripts/blob/master/README.md
  **********

  You'll want to remove any of our scripts that you replace with this from the auto start so they aren't getting run twice.

  Useful helpers:
  list_autostarts      #show all scripts that are started automatically
  add_auto(script)     #add a script to the autostart list
  stop_auto(script)    #remove a script from the autostart list
  stop_updating_script(script)
  list_tracked_scripts
  download_once(script)
=end

require 'json'
require 'net/http'
require 'base64'
require 'yaml'
require 'ostruct'

toggle_unique

debug = variable.include?('debug')

start_script('common')

class ScriptManager
  def initialize(debug)
    @debug = debug
    @git_token = '4491b4c6' + '20864db1575' + '3542a5d8729cf362acd1c'
    @status_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/trees/master?recursive=1'
    @item_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/blobs/'
    UserVars.dependency_as_scripts ||= %w(common.lic drinfomon.lic spellmonitor.lic events.lic roomnumbers.lic textsubs.lic smartlisten.lic equipmanager.lic)
    @developer = Settings['dependency-developer'] || false
    @last_run_version = {}
    @queue = []
  end

  def toggle_developer
    @developer = !@developer
  end

  def get_auto_starts
    CharSettings['scripts']
  end

  def get_versions
    if File.exist?('script_versions.dat')
      Marshal.load(File.open('script_versions.dat', 'rb'))
    else
      {}
    end
  end

  def set_version(filename, sha)
    data = get_versions
    data[filename] = sha
    File.open('script_versions.dat', 'wb') { |file| Marshal.dump(data, file) }
  end

  def remove_script(filename)
    data = get_versions
    data.delete(filename)
    File.open('script_versions.dat', 'wb') { |file| Marshal.dump(data, file) }
  end

  def queue_names(script_names)
    @queue = script_names
  end

  def queue_empty?
    @queue.empty?
  end

  def run_queue
    get_script(@queue.shift) unless @queue.empty?
    Settings['dependency-developer'] = @developer
  end

  def get_script(filename, force = false)
    return if filename.nil? || filename.empty?
    filename = filename.dup
    echo("checking:#{filename} force:#{force}") if @debug
    download_script(filename) if get_versions[filename].nil? || force || file_outdated?(filename)
    refresh_script(filename)
  end

  def check_scripts(force = false)
    get_versions.each { |name, _| get_script(name, force) }
  end

  def download_script(filename)
    return if filename.nil? || filename.empty?
    echo("downloading:#{filename}") if @debug
    info = get_file_status(filename)
    if @developer
      set_version(filename, info['sha'])
      return
    end
    echo("info:#{info}") if @debug
    blob = make_request(info['url'])
    File.open("./scripts/#{filename}", 'w') { |file| file.print(Base64.decode64(blob['content'])) }
    set_version(filename, blob['sha'])
  end

  def refresh_script(filename)
    echo("refresh:#{filename}") if @debug
    return unless UserVars.dependency_as_scripts.include?(filename)
    return if @last_run_version[filename] == get_versions[filename]
    @last_run_version[filename] = get_versions[filename]
    filename.sub!(/\.lic$/, '')
    echo("refresh:#{filename}") if @debug
    while Script.running?(filename)
      stop_script(filename)
      pause 0.1
    end
    start_script(filename)
  end

  def file_outdated?(filename)
    echo("file_outdated?:#{filename}") if @debug
    local_version = get_versions[filename]
    echo("local:#{local_version}") if @debug
    info = get_file_status(filename)
    unless info
      echo('file not found in repository')
      return false
    end
    echo("remote:#{info['sha']}") if @debug
    info['sha'] != local_version
  end

  def get_file_status(filename)
    get_status['tree'].find { |element| element['path'] == filename }
  end

  def get_status
    return @status if @status && Time.now - @status_time <= 30 # prevent flooding
    @status_time = Time.now
    @status = make_request(@status_url)
  end

  def make_request(raw_uri)
    uri = URI.parse(raw_uri)
    args = { access_token: @git_token }
    uri.query = URI.encode_www_form(args)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Get.new(uri.request_uri)

    response = http.request(request)
    JSON.parse(response.body)
  end
end

class SetupFiles
  def initialize(debug)
    @debug = debug
    @load = true
    @latest = false
    @settings = {}
    @extras = []
  end

  def request_settings(options)
    @load = true
    @extras = options
  end

  def loaded?
    !@load
  end

  def run_queue
    load_settings if @load
  end

  attr_reader :settings

  def load_settings
    profile = "./scripts/profiles/#{checkname}-setup.yaml"
    if File.exist?(profile)
      settings = YAML.load_file('./scripts/profiles/base.yaml')
      settings.merge!(YAML.load_file(profile))
      @extras.each do |subfile|
        filepath = "./scripts/profiles/#{checkname}-#{subfile}.yaml"
        if File.exist?(filepath)
          settings.merge!(YAML.load_file(filepath))
        else
          echo("Tried to request setting file that doesn't exist #{filepath}")
        end
      end
    end
    @settings = OpenStruct.new(settings)
    @load = false
  end
end

$setupfiles = SetupFiles.new(debug)
$manager = ScriptManager.new(debug)

def get_settings(options = [])
  $setupfiles.request_settings(options)
  pause 0.1 until $setupfiles.loaded?
  $setupfiles.settings
end

def format_name(name)
  name =~ /\.lic$/ ? name : "#{name}.lic"
end

def custom_require(script_names)
  script_names = [script_names] unless script_names.is_a?(Array)
  script_names.map!(&method(:format_name))
  $manager.queue_names(script_names)
  pause 0.1 until $manager.queue_empty?
end

def force_refresh_scripts
  $manager.check_scripts(true)
end

def stop_updating_script(filename)
  $manager.remove_script(format_name(filename))
end

def list_tracked_scripts
  $manager.get_versions.sort
end

def download_once(filename)
  name = format_name(filename)
  custom_require([name])
  stop_updating_script(name)
end

def migrate_scripts
  remove_from_autostart(managed_scripts)
  add_self_to_autostart
  custom_require(managed_scripts)
end

def managed_scripts
  repo_scripts = $manager.get_status['tree'].map { |element| element['path'] }.select { |file| file.include?('.lic') && !file.include?('-setup') }
  local_scripts = Dir['./scripts/*.lic'].map { |item| File.basename(item) }
  repo_scripts & local_scripts
end

def list_autostarts
  UserVars.dependency_as_scripts
end

def add_auto(script)
  script = format_name(script)
  UserVars.dependency_as_scripts.push(script) unless UserVars.dependency_as_scripts.include?(script)
end

def stop_auto(script)
  UserVars.dependency_as_scripts.delete(format_name(script))
end

def toggle_developer_mode
  $manager.toggle_developer
end

def remove_from_autostart(scripts)
  scripts.each do |script|
    start_script('autostart', ['remove', '--global', File.basename(script, '.*')])
    pause 0.1 while running?('autostart')
    start_script('autostart', ['remove', File.basename(script, '.*')])
    pause 0.1 while running?('autostart')
  end
end

def add_self_to_autostart
  start_script('autostart', ['add', '--global', File.basename('dependency', '.*')])
  pause 0.1 while running?('autostart')
end

$setupfiles.load_settings
$manager.check_scripts

loop do
  $manager.run_queue
  $setupfiles.run_queue
  pause 0.1
end
