=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Before running crossing-training.lic for the first time, you MUST add a method for each of your characters which sets the following UserVars (change the values to match your needs):
    UserVars.crossing_training = [ ... ]

  Your new method MAY also need to override any UserVars set in baseline_setup.
  * Be sure not to change baseline_setup itself, as this is common to all characters.
  * See below for some example methods for various guilds.
  * Be aware of the difference in overwriting something that was set in baseline_setup vs updating it.
    * This will insert a new key or replace the key if it exists in a hash: UserVars.exp_timers["Theurgy"] = { ... }
    * This will overwrite a hash: UserVars.exp_timers = { "Theurgy" => { ... } }
    * This will append to an array: UserVars.armor << "..."
    * This will overwrite an array: UserVars.armor = [ ... ]
=end

def main
  baseline_setup

  case checkname
  when 'Etreu' # Ranger
    etreu
  when 'Menacra' # Cleric
    menacra
  when 'Selanas' # Empath
    selanas
  when 'Sheltim' # Barbarian
    sheltim
  when 'Torgro' # Warrior Mage
    torgro
  when 'Sarikis' # Moon Mage
    sarikis
  when 'Thurmond' # Bard
    thurmond
  when 'Evissam' # Thief
    evissam
  else
    echo "***DON'T USE THE BASELINE PROFILE***"
    echo 'Open and edit crossing-setup.lic'
  end
end

def baseline_setup
  UserVars.exp_timers = {
    'Stealth' => { 'cooldown' => 60 * 5, 'timer' => Time.now },
    'First Aid' => { 'cooldown' => 60 * 6, 'timer' => Time.now },
    'Locksmithing' => { 'cooldown' => 60 * 10, 'timer' => nil },
    'Theurgy' => { 'cooldown' => 60 * 12, 'timer' => nil },
    'Attunement' => { 'cooldown' => 65 * 2, 'timer' => nil },
    'Summoning' => { 'cooldown' => 60 * 2, 'timer' => nil }
  }

  UserVars.held_cambrinth = false
  # Worn chargable cambrinth
  UserVars.cambrinth = 'armband'
  UserVars.cambrinth_cap = 32
  # A scaling factor for the mana used when preparing a spell (rounded down)
  # If the base mana for a spell is 20, then setting this to 0.98 would result in 19
  UserVars.prep_scaling_factor = 0.98

  UserVars.listen = true

  # Whether or not spells should be used for supernatural/magic skills
  UserVars.train_with_spells = true

  UserVars.training_spells = {}
  UserVars.training_nonspells = {}

  # Information needed to train forging
  UserVars.forge_container = 'backpack'
  UserVars.forge_hammer = 'diagonal-peen'

  # This is a room in which it is safe to train skills that do not require movement.
  # Good rooms are 851 (just outside the Ranger's Guild) and 992 (the NE Gate).
  UserVars.safe_room = 851

  UserVars.hide_to_steal = true

  UserVars.hand_armor = 'gloves'

  # Whether or not the script will exit when all skills are mindlocked
  UserVars.exit_on_skills_capped = true
end

def etreu
  UserVars.crossing_training = [
    'First Aid',
    'Appraisal',
    'Scouting',
    'Athletics',
    'Augmentation',
    'Attunement',
    'Utility',
    'Mechanical Lore',
    'Outdoorsmanship',
    'Warding',
    'Locksmithing'
  ]

  UserVars.armor = %w(gloves shield mask mantle greaves vambraces cap tasset)

  UserVars.training_spells['Warding'] = { 'abbrev' => 'EY', 'symbiosis' => true }
  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'ATH', 'symbiosis' => true }
  UserVars.training_spells['Utility'] = { 'abbrev' => 'blend', 'after' => StringProc.new("fput('release blend')") }
end

def menacra
  UserVars.crossing_training = [
    'First Aid',
    'Appraisal',
    'Athletics',
    'Augmentation',
    'Attunement',
    'Utility',
    'Mechanical Lore',
    'Outdoorsmanship',
    'Warding',
    'Theurgy',
    'Perception',
    'Performance'
  ]

  # UserVars.safe_room = 705

  UserVars.armor = %w(gloves shield mask mantle greaves vambraces cap tasset)

  UserVars.training_spells['Warding'] = { 'abbrev' => 'MPP' }
  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'MAPP' }
  UserVars.training_spells['Utility'] = { 'abbrev' => 'BLESS', 'symbiosis' => true }
end

def selanas
  UserVars.crossing_training = [
    # 'Empathy',
    'First Aid',
    'Appraisal',
    # 'Athletics',
    'Augmentation',
    # 'Attunement',
    'Utility',
    # 'Mechanical Lore',  #Make foraging room tag dependent.
    # 'Outdoorsmanship',
    'Warding',
    'Scholarship',
    # 'Perception'.
    'Performance'
  ]

  UserVars.listen = false

  UserVars.safe_room = 705
  UserVars.exit_on_skills_capped = false

  UserVars.armor = ['gloves']

  UserVars.training_spells['Warding'] = { 'abbrev' => 'IC' }
  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'GOL', 'symbiosis' => true }
  UserVars.training_spells['Utility'] = { 'abbrev' => 'HW', 'symbiosis' => true, 'cast' => 'cast chest' }

  UserVars.held_cambrinth = false
end

def sarikis
  UserVars.crossing_training = [
    # 'Astrology',
    # 'First Aid',
    'Appraisal',
    # 'Athletics',
    # 'Augmentation',
    # 'Attunement',
    # 'Utility',
    'Mechanical Lore',
    'Outdoorsmanship',
    # 'Warding',
    'Perception',
    'Performance',
    # 'Scholarship',
    # 'Locksmithing',
    # 'Forging',
  ]

  UserVars.skill_cap = 123

  UserVars.held_cambrinth = true

  UserVars.safe_room = 793

  UserVars.exp_timers['Astrology'] = { 'cooldown' => 60 * 3, 'timer' => nil }

  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'cv' }
  UserVars.training_spells['Warding'] = { 'abbrev' => 'psy' }
  UserVars.training_spells['Utility'] = { 'abbrev' => 'locate', 'cast' => 'cast sarikis' }

  UserVars.exit_on_skills_capped = false
end

def thurmond
  UserVars.crossing_training = [
    'First Aid',
    'Appraisal',
    'Athletics',
    'Augmentation',
    'Attunement',
    'Utility',
    'Mechanical Lore',
    'Outdoorsmanship',
    'Warding',
    'Perception',
    'Scholarship',
    # 'Locksmithing',
    'Forging',
    'Performance'
  ]

  UserVars.held_cambrinth = true

  UserVars.exp_timers['Attunement'] = { 'cooldown' => 65, 'timer' => nil }
  UserVars.exp_timers['Utility'] = { 'cooldown' => 90, 'timer' => nil }

  UserVars.training_spells['Utility'] = { 'abbrev' => 'reson', 'before' => StringProc.new("fput('get my bola')"), 'cast' => 'cast bola', 'after' => StringProc.new("fput('stow my bola')") }
  UserVars.training_spells['Warding'] = { 'abbrev' => 'repr' }
  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'ecry' }

  UserVars.exit_on_skills_capped = false
end

def evissam
  UserVars.hide_to_steal = false

  UserVars.crossing_training = [
    # 'First Aid',
    'Appraisal',
    'Athletics',
    'Augmentation',
    'Attunement',
    'Utility',
    'Mechanical Lore',
    'Outdoorsmanship',
    'Warding',
    'Perception',
    'Scholarship',
    # 'Locksmithing',
    # 'Forging',
    'Performance'
  ]

  UserVars.train_with_spells = false

  UserVars.training_nonspells['Augmentation'] = 'khri focus'

  UserVars.exit_on_skills_capped = false
end

def sheltim
  UserVars.crossing_training = [
    'First Aid',
    'Appraisal',
    'Athletics',
    'Mechanical Lore',
    'Outdoorsmanship',
    'Perception',
    'Debilitation',
    'Warding',
    'Augmentation',
    'Locksmithing',
    'Forging'
  ]

  UserVars.exp_timers['Augmentation'] = { 'cooldown' => 60 * 1, 'timer' => nil }
  UserVars.exp_timers['Debilitation'] = { 'cooldown' => 60 * 1, 'timer' => nil }
  UserVars.exp_timers['Warding'] = { 'cooldown' => 60 * 5, 'timer' => nil }

  UserVars.train_with_spells = false
  UserVars.training_nonspells['Augmentation'] = 'berserk avalanche'
  UserVars.training_nonspells['Debilitation'] = 'berserk earthquake'
  UserVars.training_nonspells['Warding'] = 'form badger'

  UserVars.exit_on_skills_capped = false
  UserVars.crossing_trainer_debug = true
end

def torgro
  UserVars.crossing_training = [
    'First Aid',
    'Appraisal',
    # 'Athletics',
    # 'Mechanical Lore',
    # 'Outdoorsmanship',
    'Perception',
    'Warding',
    'Augmentation',
    # 'Forging',
    'Summoning',
    'Utility',
    'Attunement',
    # 'Sorcery',
    # 'Performance',
    'Scholarship'
  ]

  UserVars.training_spells['Warding'] = { 'abbrev' => 'es' }
  UserVars.training_spells['Utility'] = { 'abbrev' => 'ig', 'before' => StringProc.new("fput('get my throwing hammer')"), 'cast' => 'cast my throwing hammer', 'after' => StringProc.new("fput('stow my throwing hammer')") }
  UserVars.training_spells['Augmentation'] = { 'abbrev' => 'sub' }

  UserVars.exit_on_skills_capped = false
  UserVars.crossing_trainer_debug = true
end

main
